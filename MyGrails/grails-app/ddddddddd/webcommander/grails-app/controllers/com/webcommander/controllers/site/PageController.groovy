package com.webcommander.controllers.site

import com.webcommander.AutoPageContent
import com.webcommander.Page
import com.webcommander.authentication.annotations.AutoGeneratedPage
import com.webcommander.common.CommonService
import com.webcommander.common.FileService
import com.webcommander.config.StoreDetail
import com.webcommander.constants.DomainConstants
import com.webcommander.constants.NamedConstants
import com.webcommander.content.Article
import com.webcommander.content.PageService
import com.webcommander.design.DockSection
import com.webcommander.design.Layout
import com.webcommander.design.LayoutService
import com.webcommander.design.WidgetService
import com.webcommander.manager.CacheManager
import com.webcommander.manager.HookManager
import com.webcommander.manager.LicenseManager
import com.webcommander.manager.PathManager
import com.webcommander.models.ProductData
import com.webcommander.util.AppUtil
import com.webcommander.util.Base64Coder
import com.webcommander.util.SortAndSearchUtil
import com.webcommander.util.security.InformationEncrypter
import com.webcommander.webcommerce.*
import com.webcommander.widget.Widget
import grails.util.Holders

import javax.servlet.http.Cookie

class PageController {
    PageService pageService
    LayoutService layoutService
    WidgetService widgetService
    CategoryService categoryService
    ProductService productService
    CommonService commonService
    FileService fileService

    def view() {
        def pageUrl = params.page ?: AppUtil.getConfig(DomainConstants.SITE_CONFIG_TYPES.GENERAL, "landing_page")
        Page page = pageService.getSitePage(pageUrl);
        if (page == null) {
            response.setStatus(404)
            forward(controller: "exception", action: "handle404")
            return;
        }

        if (!(session.admin && params.adminView)) {
            if (page.visibility == DomainConstants.PAGE_VISIBILITY.RESTRICTED) {
                if (!session.customer) {
                    flash.param = [referer: "/" + pageUrl];
                    redirect(controller: "customer", action: "login")
                    return;
                }
                if (page.visibleTo == DomainConstants.PAGE_VISIBLE_TO.SELECTED) {
                    def found = page.customers.id.contains(session.customer)
                    if (!found) {
                        found = page.customerGroups.find {
                            return it.customers.id.contains(session.customer)
                        }
                    }
                    if (!found) {
                        response.setStatus(403)
                        forward(controller: "exception", action: "handle403")
                        return;
                    }
                }
            }
        }
        render(view: "/layouts/sitepage", model: [page: page]);
    }

    def layoutAllCss() {
        Long etag = request.getHeader("If-None-Match").toLong(null);
        response.setContentType("text/css");
        Long layoutId = params.long("id") ?: 0;
        if (etag && !layoutService.isModified(layoutId, etag)) {
            render(status: 304)
            return;
        }
        Layout layout = Layout.get(layoutId);
        if (!layout) {
            response.setStatus(404)
            render("")
            return;
        }
        response.addHeader("Etag", "" + new Date().time)
        response.addHeader("Cache-Control", "max-age=86400")
        response.addHeader("Vary", "Accept-Encoding")
        if (params.autocontent) {
            render(text: AutoPageContent.get(params.autocontent).css ?: "")
        }
        render(text: layout.css ?: "")
        render(text: "\n")
        Widget.createCriteria().list {
            projections {
                property("css")
                property("uuid")
                property("widgetType")
            }
            eq("containerType", "layout")
            eq("containerId", layout.id)
        }.each {
            if (it[0]) {
                render(text: it[0] ?: "")
                render(text: "\n")
            }
            StringWriter hookCss = new StringWriter()
            render text: HookManager.hook(it[2] + "-allcss", hookCss, it[1], request).toString()
        }
        Layout.createCriteria().list {
            projections {
                dockableSections {
                    property("css")
                }
            }
            eq "id", layout.id
        }.each {
            if (it) {
                render(text: it ?: "")
                render(text: "\n")
            }
        }
        StringWriter hookCss = new StringWriter()
        render text: HookManager.hook("layoutallcss", hookCss, layout, request).toString()
    }

    def pageAllCss() {
        response.setContentType("text/css");
        Long etag = request.getHeader("If-None-Match").toLong(null);
        Long pageId = params.long("id") ?: 0;
        if (etag && !pageService.isModified(pageId, etag)) {
            render(status: 304)
            return;
        }
        Page page = pageService.getPage(pageId);
        Layout layout = page.layout
        response.addHeader("Etag", "" + new Date().time)
        response.addHeader("Cache-Control", "max-age=86400")
        response.addHeader("Vary", "Accept-Encoding")
        if (!page) {
            render(status: 404)
            return;
        }
        render(text: page.css ?: "")
        if (layout) {
            render(text: layout.css ?: "")
            render(text: "\n")
            Layout.createCriteria().list {
                projections {
                    dockableSections {
                        property("css")
                    }
                }
                eq "id", layout.id
            }.each {
                if (it) {
                    render(text: it ?: "")
                    render(text: "\n")
                }
            }
        }
        render(text: "\n")
        Widget.createCriteria().list {
            projections {
                property("css")
                property("uuid")
                property("widgetType")
            }
            or {
                if (layout) {
                    and {
                        eq("containerType", "layout")
                        eq("containerId", layout.id)
                    }
                }
                and {
                    eq("containerType", "page")
                    eq("containerId", page.id)
                }
            }
        }.each {
            if (it[0]) {
                render(text: it[0] ?: "")
                render(text: "\n")
            }
            StringWriter hookCss = new StringWriter()
            render text: HookManager.hook(it[2] + "-allcss", hookCss, it[1], request).toString()
        }
        Page.createCriteria().list {
            projections {
                dockableSections {
                    property("css")
                }
            }
            eq "id", page.id
        }.each {
            if (it) {
                render(text: it ?: "")
                render(text: "\n")
            }
        }
        StringWriter hookCss = new StringWriter()
        render text: HookManager.hook("pageallcss", hookCss, page, request).toString()
    }

    def pageJs() {
        Long etag = request.getHeader("If-None-Match").toLong(null);
        response.setContentType("application/javascript");
        Long pageId = params.long("id") ?: 0;
        if (etag && !pageService.isModified(pageId, etag)) {
            render(status: 304)
            return;
        }
        Page page = params.container == "layout" ? null : pageService.getPage(pageId);
        Layout layout = page ? page.layout : Layout.get(pageId)
        response.addHeader("Etag", "" + new Date().time)
        response.addHeader("Cache-Control", "max-age=86400")
        response.addHeader("Vary", "Accept-Encoding")
        if (!layout && (params.container == "layout" || !page)) {
            response.setStatus(404)
            render("")
            return;
        }
        if (layout?.js) {
            render(text: "\ntry {\n")
            render(text: layout.js ?: "")
            render(text: "\n} catch(e) {}\n")
        }
        if (params.autocontent) {
            render(text: "\ntry {\n")
            render(text: AutoPageContent.get(params.autocontent).js ?: "")
            render(text: "\n} catch(e) {}\n")
        }
        if (page?.js) {
            render(text: "\ntry {\n")
            render(text: page.js ?: "")
            render(text: "\n} catch(e) {}\n")
        }
        render(text: "\n\$(function() {\n")
        Widget.createCriteria().list {
            projections {
                property("js")
                property("uuid")
                property("widgetType")
            }
            or {
                if (layout) {
                    and {
                        eq("containerType", "layout")
                        eq("containerId", layout.id)
                    }
                }
                if (page) {
                    and {
                        eq("containerType", "page")
                        eq("containerId", page.id)
                    }
                }
            }
        }.each {
            if (it[0]) {
                render(text: "\ntry {\n")
                render(text: "(function(widget) {\n")
                render(text: it[0] ?: "")
                render(text: "\n})(\$('#wi-${it[1]}'))\n")
                render(text: "\n} catch(e) {}\n")
            }
            StringWriter hookJs = new StringWriter()
            render(text: HookManager.hook(it[2] + "-alljs", hookJs, it[1], request).toString())
        }
        render(text: "\n});")
        StringWriter hookJs = new StringWriter()
        render(text: HookManager.hook("alljs", hookJs, page ?: layout, request).toString())
    }

    def widgetCss() {
        Widget widget = widgetService.getWidget(params.uuid);
        if (!widget) {
            render(status: 404, text: "")
            return;
        }
        render(text: widget.css ?: "")
    }

    def dockCss() {
        DockSection dockSection = DockSection.get(params.id);
        if (!dockSection) {
            render(status: 404, text: "")
            return;
        }
        render(text: dockSection.css ?: "")
    }

    @AutoGeneratedPage("product")
    def product() {
        session.shareid = params.shareid ? (params.shareid).replace(" ", "+") : null
        boolean forAdmin = params.adminView.toBoolean(false) && session.admin;
        Product product = productService.getAvailableProductByUrl(params.url, forAdmin)
        product = HookManager.hook("productDetailsPageProduct", product, params)
        if (!product) {
            response.setStatus(404)
            forward(controller: "exception", action: "handle404")
            return
        }

        def eCommerceConfigs = AppUtil.getConfig(DomainConstants.SITE_CONFIG_TYPES.E_COMMERCE)
        if (!forAdmin && product.availableFor != DomainConstants.PRODUCT_AVAILABLE_FOR.EVERYONE) {
            if (session.customer) {
                if (product.availableFor != DomainConstants.PRODUCT_AVAILABLE_FOR.CUSTOMER) {
                    if (!product.availableToCustomers.id.contains(session.customer) && !product.availableToCustomerGroups.customers.id.flatten().contains(session.customer)) {
                        response.setStatus(403)
                        forward(controller: "exception", action: "handle403")
                        return
                    }
                }
            } else {
                flash.param = [referer: app.currentURL()]
                redirect(controller: "customer", action: "login")
                return;
            }
        }
        ProductData productData = productService.getProductData(product, params.config ?: [:]);
        request.js = "\n;(window.page || (page = {})).productId = " + product.id + ";\n";
        String view = "/site/siteAutoPage";
        Map model = [name    : DomainConstants.AUTO_GENERATED_PAGES.PRODUCT_PAGE, productData: productData, product: product,
                     editMode: params.editMode.toBoolean(false), config: eCommerceConfigs, metaTags: productData.metaTags, title: productData.title,
                     macros  : [PRODUCT_NAME: productData.name], disableGooglePageTracking: product.disableGooglePageTracking];
        view = HookManager.hook("auto-page-view-model", view, model);
        render(view: view, model: model)
    }

    @AutoGeneratedPage("category")
    def category() {
        Map config = new HashMap(AppUtil.getConfig(DomainConstants.SITE_CONFIG_TYPES.CATEGORY_PAGE))
        config["display-type"] = NamedConstants.PRODUCT_WIDGET_VIEW.IMAGE
        String categoryUrl = params.url
        Category category = Category.findByUrlAndIsInTrash(categoryUrl, false)
        if (!category) {
            response.setStatus(404)
            forward(controller: "exception", action: "handle404")
            return
        }
        boolean forAdmin = params.adminView.toBoolean(false) && session.admin;
        if (!forAdmin) {
            if (!categoryService.isAvailable(category.id)) {
                response.setStatus(404)
                forward(controller: "exception", action: "handle404")
                return;
            }
            if (category.availableFor != "everyone") {
                Long customerId = session.customer
                if (!customerId) {
                    flash.param = [referer: "/category/" + categoryUrl];
                    redirect(controller: "customer", action: "login")
                    return;
                }
                if (category.availableFor == "selected") {
                    def found = category.availableToCustomers.id.contains(customerId)
                    if (!found) {
                        found = category.availableToCustomerGroups.find {
                            return it.customers.id.contains(customerId)
                        }
                    }
                    if (!found) {
                        response.setStatus(403)
                        forward(controller: "exception", action: "handle403")
                        return;
                    }
                }
            }
        }
        def productIds = category.products.id
        Map filterMap = [forAdmin: forAdmin];
        config["product-sorting"] = filterMap["product-sorting"] = params["cdpr-sort"]
        if (config["show_pagination"] != "none") {
            filterMap["offset"] = params.int("cdpr-offset") ?: 0;
            filterMap["max"] = params.int("cdpr-max") ?: (config["item_per_page"].toInteger(null) ?: -1)
        }
        filterMap = HookManager.hook("productViewFilterWithRequestContributionInCategoryPage", filterMap)
        Integer totalProductCount = productService.filterOutAvailableProductCount(productIds, filterMap)
        def productList = productService.getProductData(productIds, filterMap);

        def subCategoryIds = Category.where {
            parent.id == category.id
        }.list().id
        Map subfilterMap = [:];
        if (config["subcategory_show_pagination"]) {
            subfilterMap["offset"] = params.int("cdcr-offset") ?: 0;
            subfilterMap["max"] = params.int("cdcr-max") ?: (config["subcategory_item_per_page"].toInteger(null) ?: -1)
        }
        subfilterMap.forAdmin = forAdmin
        Integer categoryCount = categoryService.filterOutAvailableCategoryCount(subCategoryIds, subfilterMap)
        List categoryList = categoryService.filterOutAvailableCategories(subCategoryIds, subfilterMap);
        def macros = ['CATEGORY_NAME': category.name]
        config["display-type"] = NamedConstants.PRODUCT_WIDGET_VIEW.IMAGE
        config["show-pagination"] = config.show_pagination
        config['item-per-page-selection'] = config.item_per_page_selection
        config["product_listing_id"] = "category-product-listing"
        String view = "/site/siteAutoPage";
        Map model = [name        : DomainConstants.AUTO_GENERATED_PAGES.CATEGORY_PAGE, view: "/site/category.gsp", macros: macros, category: category, productList: productList,
                     categoryList: categoryList, config: config, productMax: filterMap.max, productOffset: filterMap.offset, totalProductCount: totalProductCount,
                     categoryMax : subfilterMap.max, categoryOffset: subfilterMap.offset, totalCategoryCount: categoryCount, metaTags: category.metaTags, title: category.title, disableGooglePageTracking: category.disableGooglePageTracking]
        view = HookManager.hook("auto-page-view-model", view, model);
        render(view: view, model: model)
    }

    @AutoGeneratedPage("article")
    def article() {
        String articleUrl = params.url
        Article article = Article.findByUrl(articleUrl)
        if (!article) {
            response.setStatus(404)
            forward(controller: "exception", action: "handle404")
            return
        }
        String view = "/site/siteAutoPage";
        Map model = [name: DomainConstants.AUTO_GENERATED_PAGES.ARTICLE_DETAILS_PAGE, view: "/site/articleView.gsp", article: article, macros: [ARTICLE_NAME: article.name]]
        view = HookManager.hook("auto-page-view-model", view, model);
        render(view: view, model: model)
    }

    def seoRoot() {
        String filePath = Holders.servletContext.getRealPath("/resources/seo-upload") + File.separator + params.fileName
        File file = new File(filePath);
        if (!file.exists()) {
            response.setStatus(404)
            render(text: "")
            return;
        }
        String mimeType = URLConnection.guessContentTypeFromName(file.getName());
        response.setHeader("Content-Type", mimeType)
        response.setHeader("Content-Length", "${file.length()}")
        InputStream inputStream = new FileInputStream(file)
        response.writer << inputStream
        inputStream.close()
        render(text: "")
    }

    @AutoGeneratedPage("newsletter.subscription")
    def subscription() {
        String view = "/site/siteAutoPage";
        Map model = [name: DomainConstants.AUTO_GENERATED_PAGES.SUBSCRIBE_NEWSLETTER]
        model << [view: "site/subscribeNewsletter.gsp"]
        view = HookManager.hook("auto-page-view-model", view, model);
        render(view: view, model: model)
    }

    @AutoGeneratedPage("newsletter.unsubscription")
    def unsubscription() {
        String view = "/site/siteAutoPage";
        Map model = [name: DomainConstants.AUTO_GENERATED_PAGES.SUBSCRIBE_NEWSLETTER]
        model << [view: "site/unsubscribeNewsletter.gsp", sid: params.sid]
        view = HookManager.hook("auto-page-view-model", view, model);
        render(view: view, model: model)
    }

    @AutoGeneratedPage("guest.customer.order.comment")
    def orderComment() {
        try {
            byte[] valueDecoded = Base64Coder.decode(params.token)
            params.orderId = new String(valueDecoded).split("::::")[0]
        } catch (Exception e) {
            redirect(url: app.baseUrl())
        }
        Long orderId = params.orderId ? params.orderId.toLong(0) : 0
        Order order = Order.get(orderId)
        StoreDetail storeDetail = StoreDetail.first()
        List<OrderComment> comments = OrderComment.findAllByOrderAndIsVisibleToCustomer(order, true)
        String view = "/site/siteAutoPage";
        Map model = [name: DomainConstants.AUTO_GENERATED_PAGES.GUEST_CUSTOMER_ORDER_COMMENT]
        model << [view: "site/guestOrderComment.gsp", order: order, comments: comments, storeDetail: storeDetail, noBackButton: true]
        view = HookManager.hook("auto-page-view-model", view, model)
        render(view: view, model: model)
    }

    def downloadProduct() {
        try {
            InformationEncrypter encrypter = new InformationEncrypter(params.token, false)
            Long orderId = encrypter.hiddenInfos[0].toLong()
            Long orderItemId = encrypter.hiddenInfos[1].toLong()
            Long variationId = encrypter.hiddenInfos[2].toLong()
            def productId
            def productFileName
            def isVariationFile
            OrderItem item = OrderItem.createCriteria().get {
                eq("id", orderItemId)
                eq("order.id", orderId)
            }
            Product product = item && item.productType == NamedConstants.CART_OBJECT_TYPES.PRODUCT && item.order.paymentStatus == DomainConstants.ORDER_PAYMENT_STATUS.PAID ? Product.get(item.productId) : null
            ProductData productData  = productService.getProductData(product, [:])
            if(productData.hasProperty('productVariationId')){
                productData.productVariationId = variationId
            }
            productData = HookManager.hook("virtual-product-data-adjustment", productData, params)
            if(productData.productFile){
                productId =  productData.productVariationId
                productFileName = productData.productFile
                isVariationFile = true
            }
            else {
                productId = product.id
                productFileName = product.productFile.name
                isVariationFile = false
            }
            if (product) {
                String productRelativeFilePath = appResource.getDownloadableProductTypeFileUrl(productId: productId, productFileName: productFileName, isVariationFile: isVariationFile)
                InputStream inputStream = fileService.readModifiableResourceFromSystem(productRelativeFilePath, NamedConstants.CLOUD_CONFIG.DEFAULT)
                if (inputStream) {
                    response.setHeader("Content-disposition", "attachment; filename=\""+productFileName+"\"")
                    response.outputStream << inputStream.bytes
                    response.outputStream.flush()
                } else {
                    new RuntimeException(g.message(code: "file.not.available"))
                }
            } else {
                new RuntimeException(g.message(code: "product.not.available"))
            }
        } catch (RuntimeException ex) {
            render text: ex.message
        }

    }

    /*Font End Editor*/

    def embeddedLogin() {
        render(view: "/frontEndEditor/embeddedLogin")
    }

    def renderPage() {
        if (params.token) {
            Map obj = CacheManager.get(NamedConstants.CACHE.SCOPE_APP, "front-end-editor-token-${params.token}")
            CacheManager.removeCache(NamedConstants.CACHE.SCOPE_APP, "front-end-editor-token-${params.token}")
            if (obj && !session.admin) {
                session.admin = obj.admin
                session.vendor = obj.vendor
                session.super_vendor = obj.super_vendor

                obj.cookies.each { List list ->
                    Cookie cookie = new Cookie(list[0], list[1])
                    cookie.maxAge = list[2]
                    cookie.path = list[3]
                    response.addCookie(cookie)
                }
            }
            redirect(url: app.siteBaseUrl() + "editor")
            return
        } else if (LicenseManager.isProvisionActive()) {
            String provisionUrl = LicenseManager.ssoURL()

            if (app.currentURL().toString().indexOf(provisionUrl) == 0) {
                String token = UUID.randomUUID().toString()
                Map dataMap = [
                        admin: session.admin,
                        vendor: session.vendor,
                        super_vendor: session.super_vendor,
                        cookies: []
                ]
                request.getCookies().each {
                    dataMap.cookies.add([it.name, it.value, it.maxAge, it.path])
                }
                CacheManager.cache(NamedConstants.CACHE.SCOPE_APP, dataMap, "front-end-editor-token-$token")

                redirect(url: app.siteBaseUrl() + "editor?token=$token")
                return
            }
        }

        Page page = pageService.getSitePage(params.long("id"))
        if (page == null) {
            def pageUrl = params.page ?: AppUtil.getConfig(DomainConstants.SITE_CONFIG_TYPES.GENERAL, "landing_page")
            page = pageService.getSitePage(pageUrl)
        }
        request.page = page;
        render(view: "/layouts/sitepage", model: [page: page, editMode: true, isFrontEndEditor: true, appVersion: Holders.grailsApplication.config['webcommander.version.number']]);
    }
}