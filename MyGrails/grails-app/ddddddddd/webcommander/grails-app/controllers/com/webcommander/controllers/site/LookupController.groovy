package com.webcommander.controllers.site

import com.webcommander.Page
import com.webcommander.authentication.annotations.AutoGeneratedPage
import com.webcommander.constants.DomainConstants
import com.webcommander.content.PageService
import com.webcommander.manager.HookManager
import com.webcommander.task.ElasticSearchService
import com.webcommander.util.AppUtil
import com.webcommander.webcommerce.CategoryService
import com.webcommander.webcommerce.ProductService
import com.webcommander.search.SearchResult
import grails.converters.JSON
import grails.util.Holders


class LookupController {

    ProductService productService
    CategoryService categoryService
    PageService pageService
    ElasticSearchService elasticSearchService

    @AutoGeneratedPage("search.result")
    def productSearch() {
        if (!params.name?.trim()) {
            response.setStatus(204)
            render(text: "")
            return;
        }
        String view = "/site/siteAutoPage";
        def model = productService.getProductSearchReasult(params)
        view = HookManager.hook("auto-page-model-view", view, model)
        render(view: view, model: model)
    }

    @AutoGeneratedPage("search.result")
    def entireSearch() {
        if (!params.name?.trim()) {
            response.setStatus(204)
            render(text: "")
            return;
        }
        int initial_offset,
            offset,
            initial_max,
            max;
        Long itemCount,
             allTotal = 0, totalCount = 0;
        List article = [],
             category = [],
             product = [];
        def domains = [
                Article : "contentService",
                Category: "categoryService",
                Product : "productService"
        ]
        def searchConfig = AppUtil.getConfig(DomainConstants.SITE_CONFIG_TYPES.SEARCH_PAGE)
        initial_offset = offset = params.int("spx-offset") ?: 0
        initial_max = max = params.int("spx-max") ?: searchConfig.item_per_page.toInteger()
        String search = params.name.trim();
        domains.each {
            def service = Holders.applicationContext.getBean(it.value);
            itemCount = service.getEntitiesInPages(search, true)
            totalCount += itemCount
            if (max == 0) {
                return;
            }
            if (offset > itemCount - 1) {
                offset = offset - itemCount
                return;
            }
            if (offset < 0) {
                offset = 0;
            }
            if (it.key == "Article") {
                article = service.getEntitiesInPages(search, offset, max)
            } else if (it.key == "Category") {
                category = service.getEntitiesInPages(search, offset, max)
            } else {
                product = service.getEntitiesInPages(search, offset, max)
            }
            offset = 0
            allTotal += Math.min(itemCount, max);
            max = initial_max - allTotal
        }
        String view = "/site/siteAutoPage";
        Map model = [name: DomainConstants.AUTO_GENERATED_PAGES.SEARCH_RESULT, view: "/site/entireSearchResult.gsp", searchCriteria: params.name, count: totalCount, offset: initial_offset, max: initial_max, article: article, product: product, category: category]
        view = HookManager.hook("auto-page-view-model", view, model);
        render(view: view, model: model)
    }

    @AutoGeneratedPage("search.result")
    def search() {
        Map searchConfig = AppUtil.getConfig(DomainConstants.SITE_CONFIG_TYPES.SEARCH_PAGE)
        Map siteSearchConfig = [
                product : [:],
                category: [:],
                page    : [:],
        ]
        def productData = [:]
        def categoryData = [:]
        def pageData = []
        Integer itemPerPag = searchConfig.item_per_page.toInteger()
        siteSearchConfig.product.max = params.int("product-search-max") ?: itemPerPag
        siteSearchConfig.product.offset = params.int("product-search-offset") ?: 0
        siteSearchConfig.category.max = params.int("category-search-max") ?: itemPerPag
        siteSearchConfig.category.offset = params.int("category-search-offset") ?: 0
        siteSearchConfig.page.max = params.int("page-search-max") ?: itemPerPag
        siteSearchConfig.page.offset = params.int("page-search-offset") ?: 0
        siteSearchConfig = HookManager.hook("site-search-config", siteSearchConfig, searchConfig)
        SearchResult results = elasticSearchService.elasticSearch(params.name?.replaceAll(/[\[\]\^\{\}\(\)\/\"]/, {
            return "\\$it"
        }))
        siteSearchConfig.each {
                switch (it.key) {
                    case "product":
                        productData = productService.getProductData(results.products.id.collect { it.toLong() }, [:])
                        break
                    case "category":
                        categoryData = categoryService.filterOutAvailableCategories(results.categories.id.collect { it.toLong() }, [:])
                        break
                    case "page":
                        def pageList = pageService.getSitePagesById(results.pages.id.collect { it.toLong() })
                        pageList.eachWithIndex { Page entry, int i ->
                            pageData.addAll([page:  entry, pageContent: results.pages[i].pageContent])
                        }
                        break
                }
        }
        String view = "/site/siteAutoPage"
        Map model = [
                name          : DomainConstants.AUTO_GENERATED_PAGES.SEARCH_RESULT,
                view          : "/site/siteSearchResult.gsp",
                searchCriteria: params.name,
                results: results,
                productData: productData,
                categoryData: categoryData,
                pageData: pageData,
                totalResult: results.totalResult,
                searchConfig: searchConfig,
                siteSearchConfig:  siteSearchConfig
        ]
        view = HookManager.hook("auto-page-view-model", view, model)
        render(view: view, model: model)
    }

    def autoComplete(){
        Map searchConfig = AppUtil.getConfig(DomainConstants.SITE_CONFIG_TYPES.SEARCH_PAGE)
        Map siteSearchConfig = [
                product : [:],
                category: [:],
                page    : [:],
                blog    : [:]
        ]
        def searchResult = []
        Integer itemPerPag = searchConfig.item_per_page.toInteger()
        siteSearchConfig.product.max = params.int("product-search-max") ?: itemPerPag
        siteSearchConfig.product.offset = params.int("product-search-offset") ?: 0
        siteSearchConfig.category.max = params.int("category-search-max") ?: itemPerPag
        siteSearchConfig.category.offset = params.int("category-search-offset") ?: 0
        siteSearchConfig.page.max = params.int("page-search-max") ?: itemPerPag
        siteSearchConfig.page.offset = params.int("page-search-offset") ?: 0
        siteSearchConfig = HookManager.hook("site-search-config", siteSearchConfig, searchConfig)
        SearchResult results = elasticSearchService.elasticSearch(params.query?.replaceAll(/[\[\]\^\{\}\(\)\/\"]/, {
            return "\\$it"
        }))

        siteSearchConfig.each {
            switch (it.key) {
                case "product":
                    def productList = productService.getProductData(results.products.id.collect { it.toLong() }, [:])
                    productList.each {
                        searchResult.addAll([value: it.name, data:["category": "PRODUCT"]])
                    }
                    break
                case "category":
                    def catList = categoryService.filterOutAvailableCategories(results.categories.id.collect { it.toLong() },[:])
                    catList.each {
                        searchResult.addAll([value: it.name, data:["category": "CATEGORY"]])
                    }
                    break
                case "page":
                    def pageList = pageService.getSitePagesById(results.pages.id.collect { it.toLong() })
                    pageList.each {
                        searchResult.addAll([value: it.name, data:["category": "PAGE"]])
                    }
                    break
                case "blog":
                    def blogList =  HookManager.hook("get-blog-posts-by-id",results.pages.id.collect { it.toLong() })
                    blogList.each {
                        searchResult.addAll([value: it.name, data:["category": "BLOG"]])
                    }
                    break
            }
        }
        render(["query": "Unit", "suggestions":  searchResult ] as JSON)
    }


}
