package com.webcommander.design

import com.webcommander.AutoGeneratedPage
import com.webcommander.Page
import com.webcommander.annotations.Initializable
import com.webcommander.common.CommonService
import com.webcommander.events.AppEventManager
import com.webcommander.installation.template.TemplateContent
import com.webcommander.throwables.ApplicationRuntimeException
import com.webcommander.util.StringUtil
import com.webcommander.util.TrashUtil
import com.webcommander.widget.Widget
import grails.gorm.transactions.Transactional
import grails.web.databinding.DataBindingUtils

@Transactional
@Initializable
class LayoutService {

    WidgetService widgetService
    CommonService commonService
    static {
        AppEventManager.on("layout-update", { id ->
            Layout layout = Layout.get(id)
            layout.isDisposable = false
            layout.save()
        })
    }

    public static void initialize() {
        AppEventManager.on("before-template-install", {
            List<TemplateContent> contents = TemplateContent.createCriteria().list {
                eq("contentType", "layout")
            }
            if(contents) {
                Layout.where {
                    inList("id", contents.contentId)
                }.updateAll(isDisposable: true)
                contents*.delete()
            }
        });
    }

    Boolean copyLayout(Long id) {
        Layout layout = Layout.get(id);
        Layout copyLayout = new Layout();
        DataBindingUtils.bindObjectToInstance(copyLayout, layout.properties, [], ['headerWidgets', 'footerWidgets', 'dockableSections', 'created', 'updated'], null);
        def headerWidgetIds = layout.headerWidgets.collect{ it.id };
        def footerWidgetIds = layout.footerWidgets.collect{ it.id };
        def docksWidgetIds = layout.dockableSections.widgets.collect{ it.id }.flatten();

        copyLayout.name = commonService.getCopyNameForDomain(layout);
        copyLayout.save();
        def widgetList = Widget.createCriteria().list {
            eq("containerId", id)
            eq("containerType", "layout")
        }
        def dockableWidgetMap = [:];
        widgetList.each {
            Widget widget = widgetService.copyWidget(it.id, copyLayout.id, it.containerType);
            if(headerWidgetIds.contains(it.id)) {
                copyLayout.addToHeaderWidgets(widget);
            } else if (footerWidgetIds.contains(it.id)) {
                copyLayout.addToFooterWidgets(widget);
            } else if(docksWidgetIds.contains(it.id)) {
                dockableWidgetMap[it.id] = widget;
            } else {
                copyLayout.body = copyLayout.body.replaceFirst("uuid=\"" + it.uuid + "\"", "uuid=\"" + widget.uuid + "\"");
            }
        }
        layout.dockableSections.each {
            String uuid = StringUtil.uuid;
            String dockCss = it.css.replace(it.uuid, uuid)
            DockSection dockSection = new DockSection(uuid: uuid, css: dockCss).save();
            it.widgets.each {
                dockSection.addToWidgets(dockableWidgetMap[it.id]);
            }
            copyLayout.addToDockableSections(dockSection);
        }
        return !copyLayout.hasErrors();
    }

    Long createLayout(String name) {
        if(!commonService.isUnique(Layout, [field: "name", value: name])) {
            throw new ApplicationRuntimeException("layout.name.already.exists")
        }
        return new Layout(name: name).save()?.id
    }

    Boolean deleteLayout(Long id, String at2_reply, String at1_reply) {
        TrashUtil.preProcessFinalDelete("layout", id, at2_reply != null, at1_reply != null)
        AppEventManager.fire("before-layout-delete", [id])
        Layout layout = Layout.get(id);
        try {
            layout.delete();
            AppEventManager.fire("layout-delete", [id])
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    def getAttachedPages(Long id) {
       def pageList = [:];
        pageList["customPage"] = (Page.createCriteria().list {
            eq("layout.id", id)
        });
        pageList["systemPage"] = (AutoGeneratedPage.createCriteria().list {
            eq("layout.id", id)
            projections {
                property("name")
            }
        })
        return pageList;
    }

    Boolean rename(Long id, String newName) {
        Layout layout = Layout.get(id);
        layout.name = newName;
        layout.save();
        if(layout.hasErrors()) {
            return false
        }
        AppEventManager.fire("layout-update", [layout.id])
        return true
    }

    public boolean isModified(Long layoutId, Long etag) {
        Date lastDate = new Date(etag).gmt();
        String query = "select count(l) from Layout l where l.id = :lid and (l.updated > :date or (select count(w) from Widget w where w.containerType = 'layout' and w.containerId = l.id and l.updated > :date) > 0))";
        return Layout.executeQuery(query, [lid: layoutId, date: lastDate]).get(0) > 0;
    }

    Closure getCriteriaClosure(Map params) {
        return {
            if(params.layoutType != "disposable") {
                eq("isDisposable", false)
            } else {
                eq("isDisposable", true)
            }
            if(params.layoutType == "template") {
                inList("id", TemplateContent.where {
                    projections {
                        distinct("contentId")
                    }
                    eq("contentType", "layout")
                })
            }
        }
    }
    List<Layout> getLayouts(Map params) {
        return Layout.createCriteria().list {
            and getCriteriaClosure(params)
        }
    }

    Integer getLayoutCount(Map params) {
        return Layout.createCriteria().count {
            and getCriteriaClosure(params)
        }
    }
}
