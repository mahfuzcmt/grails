package com.webcommander.installation.template

import com.webcommander.AppResourceTagLib
import com.webcommander.AutoGeneratedPage
import com.webcommander.AutoPageContent
import com.webcommander.Page
import com.webcommander.admin.ConfigService
import com.webcommander.common.CommonService
import com.webcommander.common.FileService
import com.webcommander.config.SiteConfig
import com.webcommander.constants.DomainConstants
import com.webcommander.constants.NamedConstants
import com.webcommander.content.*
import com.webcommander.design.DockSection
import com.webcommander.design.Layout
import com.webcommander.design.Resolution
import com.webcommander.design.TemplateService
import com.webcommander.events.AppEventManager
import com.webcommander.listener.SessionManager
import com.webcommander.manager.CloudStorageManager
import com.webcommander.models.TemplateData
import com.webcommander.plugin.PluginManager
import com.webcommander.util.DomainUtil
import com.webcommander.util.FileUtil
import com.webcommander.util.StringUtil
import com.webcommander.util.ZipUtil
import com.webcommander.util.security.InformationEncrypter
import com.webcommander.webcommerce.*
import com.webcommander.widget.Widget
import com.webcommander.widget.WidgetContent
import grails.converters.JSON
import grails.gorm.transactions.Transactional
import org.apache.commons.io.FileUtils
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Qualifier


class TemplateInstallationService {

    TemplateService templateService
    CommonService commonService
    CategoryService categoryService
    ConfigService configService
    RemoteRepositoryService remoteRepositoryService
    FileService fileService
    List<String> undefinedPlugin
    List<String> installablePlugin
    TemplateDataProviderService templateDataProviderService
    @Autowired
    @Qualifier("com.webcommander.AppResourceTagLib")
    AppResourceTagLib appResource


    private String TEMPLATE_DATA_PATH

    private URLConnection getConnection(String url) {
        String domainName = url.split("/")[2].split(":")[0]
        InformationEncrypter encrypter = new InformationEncrypter()
        encrypter.hideInfo(domainName)
        URL connectionUrl = new URL(url)
        URLConnection connection = connectionUrl.openConnection()
        connection.setRequestProperty("auth-info", encrypter.toString())
        return connection
    }

    def getMissingPlugins(String templateURL) {
        def remoteTemplatePlugins = templateDataProviderService.getRemoteTemplateInstalledPlugins(templateURL)
        undefinedPlugin = new ArrayList<String>()
        installablePlugin = new ArrayList<String>()
        remoteTemplatePlugins.each {
            if (!PluginManager.isInstalled(it)) {
                if (PluginManager.isLoaded(it)) {
                    installablePlugin.add(it)
                } else {
                    undefinedPlugin.add(it)
                }
            }
        }
        return [systemUndefinedPlugins: undefinedPlugin, installablePlugins: installablePlugin]
    }

    void findReplaceHardCodedURL(File resources, InstallationDataHolder installationDataHolder) {
        FindReplaceUrl findReplaceUrl = new FindReplaceUrl(installationDataHolder)
        resources.listFiles().each {
            if (it.directory) {
                findReplaceHardCodedURL(it, installationDataHolder)
            } else {
                if (it.name.endsWith(".html") || it.name.endsWith(".css")) {
                    it.text = findReplaceUrl.replace(it)
                }
            }
        }
    }

    void moveTemplateData(InstallationDataHolder installationDataHolder, String srcPath, String destPath) {
       try {
           File resources = new File(TEMPLATE_DATA_PATH, srcPath)
           findReplaceHardCodedURL(resources, installationDataHolder)
           String destAbsulatePath = appResource.getResourcePhysicalPath(extension: destPath)
           File dest = new File(destAbsulatePath)
           if(resources.exists() && resources.isDirectory()) {
               fileService.putResourceDirectory(resources.getAbsolutePath(), destPath, NamedConstants.CLOUD_CONFIG.DEFAULT)
               installationDataHolder.COPIED_STATIC_CONTENTS.add(dest.absolutePath)
           } else if(resources.exists()){
               fileService.putResource(resources.getAbsolutePath(), destPath, NamedConstants.CLOUD_CONFIG.DEFAULT)
               installationDataHolder.COPIED_STATIC_CONTENTS.add(dest.absolutePath)
           }
       } catch (Exception ex) {
           log.error(ex.getMessage())
       }
    }

    Long saveCategoryTypeWidgetContent(TemplateData templateData, InstallationDataHolder installationDataHolder, Map categoryData) {
        String contentType = DomainConstants.WIDGET_CONTENT_TYPE.CATEGORY
        Map parentData
        if(categoryData.parent) {
            parentData = templateData.getWidgetContent(contentType, categoryData.parent)
            saveWidgetContent(templateData, installationDataHolder, contentType, parentData)
            categoryData.parent = installationDataHolder.getContentMapping(contentType, categoryData.parent, "id")
        }
        Category category = new Category()
        DomainUtil.populateDomainInst(category, categoryData, [exclude: ["productCount", "products"]]) // TODO: remove product count
        if(!commonService.isUnique(category, "url")) {
            category.url = commonService.getUrlForDomain(category)
        }
        if(!commonService.isUnique(category, "sku")) {
            category.sku = commonService.getSKUForDomain(Category)
        }
        if(categoryService.isNameUnique(null, categoryData.id ? Category.get(categoryData.id) : null, category.name) != "not-exist") {
            category.name = commonService.getCopyNameForDomain(category)
        }
        category.cloudConfig = CloudStorageManager.getDefaultCloudConfig()
        category.save()
        if(category.hasErrors()) {
            return null
        }
        moveTemplateData(installationDataHolder, "${AppResourceTagLib.RESOURCES}/${appResource.getCategoryRelativeUrl(categoryData.id)}", appResource.getCategoryRelativeUrl(category.id))
        return category.id
    }

    Long saveArticleTypeWidgetContent(TemplateData templateData, InstallationDataHolder installationDataHolder, Map data) {
        Article article = new Article()
        DomainUtil.populateDomainInst(article, data)
        if(!commonService.isUnique(article, "name")) {
            article.name = commonService.getCopyNameForDomain(article)
        }
        if(!commonService.isUnique(article, "url")) {
            article.url = commonService.getUrlForDomain(article)
        }
        article.save()
        if(article.hasErrors()) {
            return null
        }
        return article.id
    }

    Long saveProductTypeWidgetContent(TemplateData templateData, InstallationDataHolder installationDataHolder, Map data) {
        String odlUrl = data.url
        if(!commonService.isUnique(Product, [field: "sku", value: data.sku])) {
            data.sku = commonService.getSKUForDomain(Product)
        }
        if(!commonService.isUnique(Product,  [field: "url", value: data.url])) {
            data.url = commonService.getUrlForDomain(Product, data.name)
        }
        Product product = new Product()
        data.parent = installationDataHolder.getContentMapping(DomainConstants.WIDGET_CONTENT_TYPE.CATEGORY, data.parent, "id")
        List parents = []
        data.parents.each {
            Long parentId = installationDataHolder.getContentMapping(DomainConstants.WIDGET_CONTENT_TYPE.CATEGORY, it, "id")
            if(parentId) {
                parents.add(parentId)
            }
        }
        data.parents = []
        DomainUtil.populateDomainInst(product, data, [exclude: ["relatedProducts", "images", "displayPrice", "previousPrice", "isPurchaseRestricted"]])
        if(product.hasErrors()) {
            return null
        }
        product.save()
        CloudConfig cloudConfig = CloudStorageManager.getDefaultCloudConfig()
        data.images.each {
            ProductImage image = new ProductImage(product: product)
            DomainUtil.populateDomainInst(image, it)
            image.cloudConfig = cloudConfig
            image.save()
            installationDataHolder.setContentMapping("product_image", it.id, "id", image.id)
        }
        List<Category> newCategories = parents.collect { Category.proxy(it) }
        newCategories.each {
            it.addToProducts(product)
            it.save()
        }
        moveTemplateData(installationDataHolder, "${AppResourceTagLib.RESOURCES}/${appResource.getProductRelativeUrl(data.id)}", "${appResource.getProductRelativeUrl(product.id)}")
        return product.id
    }

    Long saveAlbumTypeWidgetContent(TemplateData templateData, InstallationDataHolder installationDataHolder, Map data) {
        Album album = new Album()
        DomainUtil.populateDomainInst(album, data)
        if(!commonService.isUnique(album, "name")) {
            album.name = commonService.getCopyNameForDomain(album)
        }
        if(album.hasErrors()) {
            return null
        }
        album.save()
        CloudConfig cloudConfig = CloudStorageManager.getDefaultCloudConfig()
        data.albumImages.each {
            AlbumImage image = new AlbumImage(parent: album)
            DomainUtil.populateDomainInst(image, it)
            image.cloudConfig = cloudConfig
            image.save()
            installationDataHolder.setContentMapping("album_image", it.id, "id", image.id)
        }
        moveTemplateData(installationDataHolder, "${AppResourceTagLib.RESOURCES}/${appResource.getAlbumRelativeUrl(data.id)}", "${appResource.getAlbumRelativeUrl(album.id)}")
        return album.id
    }

    Long saveNavigationTypeWidgetContent(TemplateData templateData, InstallationDataHolder installationDataHolder, Map data) {
        Navigation navigation = new Navigation()
        DomainUtil.populateDomainInst(navigation, data, [exclude: ["items"]])
        if(!commonService.isUnique(navigation, "name")) {
            navigation.name = commonService.getCopyNameForDomain(navigation)
        }
        if(navigation.hasErrors()) {
            return null
        }
        navigation.save()
        return navigation.id
    }

    void saveNavigationItems(TemplateData templateData, InstallationDataHolder installationDataHolder) {
        List<Map> navigations = templateData.getWidgetContents(DomainConstants.WIDGET_CONTENT_TYPE.NAVIGATION)
        Closure saveItem
        Map itemTypes = DomainConstants.NAVIGATION_ITEM_TYPE
        saveItem = { Map itemData, NavigationItem parent = null ->
            try {
                NavigationItem item = new NavigationItem(parent: parent)
                if(itemData.itemType && itemData.itemType != itemTypes.URL && itemData.itemType != itemTypes.EMAIL && itemData.itemType != itemTypes.AUTO_GENERATED_PAGE) {
                    itemData.itemRef = installationDataHolder.getContentMapping(itemData.itemType, itemData.itemRef, "id") ?: "0"
                }
                itemData.navigation = installationDataHolder.getContentMapping(DomainConstants.WIDGET_CONTENT_TYPE.NAVIGATION, itemData.navigation, "id")
                DomainUtil.populateDomainInst(item, itemData, [exclude: ["childItems"]])
                if(item.hasErrors()) {
                    return null
                }
                item.cloudConfig = CloudStorageManager.getDefaultCloudConfig()
                item.save()
                moveTemplateData(installationDataHolder, "${AppResourceTagLib.RESOURCES}/${appResource.getNavigationItemRelativeUrl(itemData.id)}-${item.image}", "resources/${appResource.getNavigationItemRelativeUrl(item.id)}-${item.image}")
                itemData.childItems.each {
                    saveItem(it, item)
                }
            } catch (Exception ex) {}

        }
        navigations.each {Map data ->
            data.items.each {
                saveItem it
            }
        }

    }

    void afterProductTypeWidgetContentsSave(TemplateData templateData, InstallationDataHolder installationDataHolder) {
        List<Map> contents = templateData.getWidgetContents(DomainConstants.WIDGET_CONTENT_TYPE.PRODUCT)
        contents.each { contentData ->
            if(contentData.relatedProducts) {
                try {
                    Product product = Product.get(installationDataHolder.getContentMapping("product", contentData.id, "id"))
                    List relatedProducts = installationDataHolder.getContentMappings("product", contentData.relatedProducts, "id")
                    DomainUtil.populateDomainInst(product, [relatedProducts: relatedProducts])
                    product.save()
                } catch (Throwable t) {}
            }
        }
    }

    void saveContentMapping(Long contentId, String contentType) {
        TemplateContent content = new TemplateContent()
        content.contentId = contentId
        content.contentType = contentType
        content.save()
    }

    void saveWidgetContent(TemplateData templateData, InstallationDataHolder installationDataHolder, String contentType, Map contentData) {
        if(this.respondsTo("save${contentType.capitalize()}TypeWidgetContent") && !installationDataHolder.getContentMapping(contentType, contentData.id, "id")) {
            try {
                Long id = this."save${contentType.capitalize()}TypeWidgetContent"(templateData, installationDataHolder, new HashMap(contentData))
                if(id) {
                    installationDataHolder.setContentMapping(contentType, contentData.id, "id", id)
                    saveContentMapping(id, contentType)
                    AppEventManager.fire("${contentType}-type-template-content-save", [templateData, installationDataHolder, contentData])
                }
            } catch (Throwable t) {
                log.error(t.message, t)
            }

        }
    }

    @Transactional
    void saveWidgetContents(TemplateData templateData, InstallationDataHolder installationDataHolder, String contentType) {
        List<Map> contents = templateData.getWidgetContents(contentType)
        contents.each { contentData ->
            saveWidgetContent(templateData, installationDataHolder, contentType, contentData)
        }
        if(this.respondsTo("after${contentType.capitalize()}TypeWidgetContentsSave")) {
            this."after${contentType.capitalize()}TypeWidgetContentsSave"(templateData, installationDataHolder)
        }
    }

    void saveWidgetContents(TemplateData templateData, InstallationDataHolder installationDataHolder) {
        DomainConstants.WIDGET_CONTENT_TYPE.each { key, contentType ->
            AppEventManager.fire("before-${contentType}-type-template-content-save", [templateData, installationDataHolder])
            saveWidgetContents(templateData, installationDataHolder, contentType)
        }
    }

    void afterImageWidgetSave(Map widgetData, Widget widget, InstallationDataHolder installationDataHolder) {
        moveTemplateData(installationDataHolder, "${AppResourceTagLib.RESOURCES}/${appResource.getImageWidgetRelativeUrl(widgetData.uuid)}", "${appResource.getImageWidgetRelativeUrl(widget.uuid)}")
        widget.content = widget.content.replace(widgetData.uuid, widget.uuid)
        widget.save()
    }

    void addWidget(Map widgetData, Long containerId, def contentObj, String type, InstallationDataHolder installationDataHolder) {
        String uuid = StringUtil.uuid
        Widget widget = new Widget(containerId: containerId, uuid: uuid)
        widgetData.css = widgetData.css?.replaceAll(widgetData.uuid, uuid)
        DomainUtil.populateDomainInst(widget, widgetData, [exclude: ["widgetContent", "containerId", "uuid"]])
        widget.save()
        widgetData.widgetContent.each { wContentData ->
            wContentData.contentId = installationDataHolder.getContentMapping(wContentData.type, wContentData.contentId, "id")
            if(wContentData.contentId) {
                WidgetContent content = new WidgetContent(widget: widget)
                DomainUtil.populateDomainInst(content, wContentData)
                content.save()
            }

        }
        if(type == "dock") {
            contentObj.addToWidgets(widget)
        } else if(type == "header") {
            contentObj.addToHeaderWidgets(widget)
        } else if(type == "footer") {
            contentObj.addToFooterWidgets(widget)
        } else {
            contentObj.body = contentObj.body.replace(widgetData.uuid, uuid)
        }
        if(this.respondsTo("after${widget.widgetType.capitalize()}WidgetSave")) {
            this."after${widget.widgetType.capitalize()}WidgetSave"(widgetData, widget, installationDataHolder)
        }
    }

    void addWidgets(List<Map> widgetsData, Long containerId, def contentObj, String type, InstallationDataHolder installationDataHolder) {
        widgetsData.each {
            addWidget(it, containerId, contentObj, type, installationDataHolder)
        }
    }

    @Transactional
    void saveLayouts(TemplateData templateData, InstallationDataHolder installationDataHolder) {
        templateData.layouts.each {Map layoutData ->
            Layout layout = new Layout()
            DomainUtil.populateDomainInst(layout, layoutData, [exclude: ["headerWidgets", "footerWidgets"]])
            if(!commonService.isUnique(layout, "name")) {
                layout.name = commonService.getCopyNameForDomain(layout)
            }
            layout.save()
            addWidgets(layoutData.headerWidgets, layout.id, layout, "header", installationDataHolder)
            addWidgets(layoutData.footerWidgets, layout.id , layout, "footer", installationDataHolder)
            addWidgets(layoutData.bodyWidgets, layout.id, layout, "body", installationDataHolder)
            layoutData.docks.each {Map dockData ->
                DockSection dockSection = new DockSection()
                dockSection.uuid = StringUtil.uuid
                dockSection.css = dockData.css.replaceAll(dockData.uuid, dockSection.uuid)
                dockSection.save()
                addWidgets(dockData.widgets, layout.id, dockSection, "body", installationDataHolder)
            }
            installationDataHolder.setContentMapping("layout", layoutData.id, "id", layout.id)
            if(templateData.siteConfigs[DomainConstants.SITE_CONFIG_TYPES.GENERAL].default_layout?.toLong(0) == layoutData.id) {
                templateData.siteConfigs[DomainConstants.SITE_CONFIG_TYPES.GENERAL].default_layout = layout.id + ""
            }
            saveContentMapping(layout.id, "layout")
        }
    }

    @Transactional
    void savePages(TemplateData templateData, InstallationDataHolder installationDataHolder) {
        templateData.pages.each {Map pageData ->
            Page page = new Page()
            pageData.layout = installationDataHolder.getContentMapping("layout", pageData.layout, "id")
            DomainUtil.populateDomainInst(page, pageData, [exclude: ["headerWidgets", "footerWidgets"]])
            if(!commonService.isUnique(page, "name")) {
                page.name = commonService.getCopyNameForDomain(page)
            }
            if(!commonService.isUnique(page, "url")) {
                page.url = commonService.getUrlForDomain(page)
                if(templateData.siteConfigs[DomainConstants.SITE_CONFIG_TYPES.GENERAL]?.landing_page == pageData.url) {
                    templateData.siteConfigs[DomainConstants.SITE_CONFIG_TYPES.GENERAL].landing_page = page.url
                }
                if(templateData.siteConfigs[DomainConstants.SITE_CONFIG_TYPES.GENERAL]?.page404 == pageData.url) {
                    templateData.siteConfigs[DomainConstants.SITE_CONFIG_TYPES.GENERAL].page404 = page.url
                }
                if(templateData.siteConfigs[DomainConstants.SITE_CONFIG_TYPES.GENERAL]?.page403 == pageData.url) {
                    templateData.siteConfigs[DomainConstants.SITE_CONFIG_TYPES.GENERAL].page403 = page.url
                }
            }
            page.save()
            addWidgets(pageData.headerWidgets, page.id, page, "header", installationDataHolder)
            addWidgets(pageData.footerWidgets, page.id , page, "footer", installationDataHolder)
            addWidgets(pageData.bodyWidgets, page.id, page, "body", installationDataHolder)
            pageData.docks.each {Map dockData ->
                DockSection dockSection = new DockSection()
                dockSection.uuid = StringUtil.uuid
                dockSection.css = dockData.css.replaceAll(dockData.uuid, dockSection.uuid)
                dockSection.save()
                addWidgets(dockData.widgets, page.id, dockSection, "body", installationDataHolder)
            }
            installationDataHolder.setContentMapping("page", pageData.id, "id", page.id)
            saveContentMapping(page.id, "page")
        }
    }

    void mapAutoPage(TemplateData templateData, InstallationDataHolder installationDataHolder) {
        templateData.autoPageMapping.each {
            AutoGeneratedPage page = AutoGeneratedPage.findByName(it.value.name)
            Layout layout
            if(page && (layout = Layout.get(installationDataHolder.getContentMapping("layout", it.value.layout, "id")))) {
                page.layout = layout
                page.save()
            }
        }
    }

    void saveSiteConfigs(TemplateData templateData, InstallationDataHolder installationDataHolder) {
        List<Map> configs = []
        templateData.siteConfigs.each {String configType, Map config ->
            config.each {configKey, value ->
                configs.add ([type: configType, configKey: configKey, value: value])
            }
        }
        configService.update(configs)
    }

    void saveResolutions(TemplateData templateData, InstallationDataHolder installationDataHolder) {
        Resolution resolution
        templateData.resolutions.each {
            resolution = Resolution.findByMaxAndMin(it.max, it.min)
            if (!resolution) {
                resolution = new Resolution()
                resolution.max = it.max
                resolution.min = it.min
            }
            if (!resolution.id) {
                resolution.save()
            }
        }
    }

    void updateAutoPageContents(TemplateData templateData) {
        List<Map> contents = templateData.getOtherContents("auto_page_content")
        contents.each {
            AutoGeneratedPage autoPage = AutoGeneratedPage.findByName(it.belong)
            AutoPageContent content
            if(autoPage && (content = AutoPageContent.findByBelong(autoPage))) {
                DomainUtil.populateDomainInst(content, it, [exclude: ["belong"]])
                content.save()
            }
        }
    }

    @Transactional
    synchronized InstallationDataHolder copyTemplateData(String templateUrl) {
        File dataFolder = new File(SessionManager.tempFolder, "template-data")
        TEMPLATE_DATA_PATH = dataFolder.absolutePath
        if(dataFolder.exists()) {
            dataFolder.deleteDir()
        }
        URLConnection connection = getConnection(templateUrl + "deploy/templateData")
        ZipUtil.extract(connection.inputStream, dataFolder.absolutePath)
        connection.inputStream.close()
        File dataFile = new File(dataFolder.absolutePath, TemplateDataProviderService.TEMPLATE_DATA_JSON)
        Map data = JSON.parse(dataFile.text)
        TemplateData templateData = new TemplateData(data)
        InstallationDataHolder installationDataHolder = new InstallationDataHolder()
        installationDataHolder.templateData = templateData
        data = JSON.parse( FindReplaceUrl.replace(dataFile, installationDataHolder))
        templateData = new TemplateData(data)
        try {
            saveResolutions(templateData, installationDataHolder)
            saveWidgetContents(templateData, installationDataHolder)
            saveLayouts(templateData, installationDataHolder)
            savePages(templateData, installationDataHolder)
            saveWidgetContents(templateData, installationDataHolder, DomainConstants.WIDGET_CONTENT_TYPE.NAVIGATION)
            saveNavigationItems(templateData, installationDataHolder)
            mapAutoPage(templateData, installationDataHolder)
            saveSiteConfigs(templateData, installationDataHolder)
            updateAutoPageContents(templateData)
            AppEventManager.fire("copy-template-data", [templateData, installationDataHolder])
        } catch (Throwable t) {
            installationDataHolder.COPIED_STATIC_CONTENTS.each {
                File file = new File(it)
                FileUtil.deleteQuietly(file)
            }
            FileUtil.deleteQuietly(dataFolder)
            throw t
        }
        return installationDataHolder
    }

    @Transactional
    synchronized Boolean install(Map params, Map templateDetails) {
        String templateUrl = templateDetails.liveURL
        String fileUrl =  templateUrl + "deploy/zipTemplate"
        File newTemplateFolder = new  File(SessionManager.tempFolder, "new-template")
        File oldTemplate = new  File(SessionManager.tempFolder, "old-template")
        String templatePhysicalPath = appResource.getRootPhysicalPath(extension: appResource.getTemplateLocalRelativePath())
        File templateFolder = new File(templatePhysicalPath)

        if(!templateFolder.exists()) {
            templateFolder.mkdirs()
        }

        if(newTemplateFolder.exists()) {
            FileUtils.cleanDirectory(newTemplateFolder)
        } else {
            newTemplateFolder.mkdirs()
        }
        if(oldTemplate.exists()) {
            FileUtils.cleanDirectory(oldTemplate)
        } else {
            oldTemplate.mkdirs()
        }

        try {
            AppEventManager.fire("before-template-install")
            URLConnection connection = getConnection(fileUrl)
            ZipUtil.extract(connection.inputStream, newTemplateFolder.absolutePath)
            InstallationDataHolder installationDataHolder = copyTemplateData(templateUrl)

            File vcsHistories = new File(remoteRepositoryService.getRelativeRepositoryVCSBase("template"))
            if(vcsHistories.exists()) {
                vcsHistories.deleteDir()
            }


            templateService.changeColor(params.color)
            SiteConfig.where {
                configKey == "template_domain"
                type == DomainConstants.SITE_CONFIG_TYPES.GENERAL
            }.updateAll(value: templateUrl)
            SiteConfig.where {
                configKey == "template_uuid"
                type == DomainConstants.SITE_CONFIG_TYPES.GENERAL
            }.updateAll(value: templateDetails.id)
            AppEventManager.fire(DomainConstants.SITE_CONFIG_TYPES.GENERAL + "-configuration-update")

            FileUtils.copyDirectory(templateFolder, oldTemplate)
            FileUtils.cleanDirectory(templateFolder)
            Thread.sleep(1000)

            findReplaceHardCodedURL(newTemplateFolder, installationDataHolder)
            fileService.putTemplateDirectory(newTemplateFolder.getAbsolutePath(), "", NamedConstants.CLOUD_CONFIG.SYSTEM_DEFAULT)
            AppEventManager.fire("template-install")
            return true
        } catch (Exception e) {
            log.error("Web Commander: " + e.message, e)
            newTemplateFolder.deleteDir()
            throw new RuntimeException("Template couldn't installed")
        }
    }
}
