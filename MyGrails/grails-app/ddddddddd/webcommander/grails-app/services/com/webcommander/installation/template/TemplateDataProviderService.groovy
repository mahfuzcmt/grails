package com.webcommander.installation.template

import com.webcommander.AppResourceTagLib
import com.webcommander.AutoGeneratedPage
import com.webcommander.AutoPageContent
import com.webcommander.Page
import com.webcommander.constants.DomainConstants
import com.webcommander.content.Album
import com.webcommander.content.AlbumImage
import com.webcommander.content.Article
import com.webcommander.content.ContentService
import com.webcommander.content.Navigation
import com.webcommander.content.NavigationItem
import com.webcommander.content.NavigationService
import com.webcommander.content.PageService
import com.webcommander.design.DockSection
import com.webcommander.design.Layout
import com.webcommander.design.Resolution
import com.webcommander.events.AppEventManager
import com.webcommander.managementhub.ManagementHubBridgeService
import com.webcommander.manager.HookManager
import com.webcommander.manager.PathManager
import com.webcommander.models.TemplateData
import com.webcommander.util.DomainUtil
import com.webcommander.util.HttpUtil
import com.webcommander.util.ZipUtil
import com.webcommander.util.security.SimpleEncrypter
import com.webcommander.webcommerce.Category
import com.webcommander.webcommerce.CategoryService
import com.webcommander.webcommerce.Product
import com.webcommander.webcommerce.ProductService
import com.webcommander.widget.Widget
import grails.converters.JSON
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Qualifier
import java.nio.charset.StandardCharsets
import java.util.zip.ZipOutputStream


class TemplateDataProviderService {
    PageService pageService
    CategoryService categoryService
    ProductService productService
    ContentService contentService
    NavigationService navigationService
    private static final TEMPLATE_LIST_URL = "manage-instance/api/v1/read/management-hub/template-filtered-list"
    private static final TEMPLATE_TYPE_AND_CATEGORY_URL = "manage-instance/api/v1/read/management-hub/template-types-and-categories"
    private static final TEMPLATE_DETAILS_URL = "manage-instance/api/v1/read/management-hub/template-details"
    public static final TEMPLATE_DATA_JSON = "data.json"
    public static final REMOTE_TEMPLATE_PLUGIN_URL = "deploymentHelper/getInstalledPlugins?token="
    ManagementHubBridgeService managementHubBridgeService

    @Autowired
    @Qualifier("com.webcommander.AppResourceTagLib")
    AppResourceTagLib appResource

    Map collectCategoryTypeContent(TemplateData templateData, Category category) {
        Map data = DomainUtil.toMap(category, [exclude: ['taxProfile', "shippingProfile", "createdBy", "metaTags", "productCount", "availableToCustomerGroups", "availableToCustomers", "products"]])
        templateData.resources.add("${appResource.getCategoryRelativeUrl(category.id)}")
        return data
    }

    List<Map> collectCategoryTypeContents(TemplateData templateData) {
        List<Category> categories = categoryService.getCategories([:])
        return categories.collect {
            return collectCategoryTypeContent(templateData, it)
        }
    }

    Map collectProductTypeContent(TemplateData templateData,  Product product) {
        Map data = DomainUtil.toMap(product, [exclude: ['taxProfile', "shippingProfile", "createdBy", "metaTags", "inventoryAdjustments", "images", "videos", "availableToCustomerGroups", "availableToCustomers"]])
        data.images = []
        product.images.each {
            data.images.add DomainUtil.toMap(it, [exclude: ["product"]])
        }
        templateData.resources.add("${appResource.getProductRelativeUrl(product.id)}")
        data = HookManager.hook("product-type-template-content", data, product)
        return data
    }

    List<Map> collectProductTypeContents(TemplateData templateData) {
        List<Product> products = productService.getProducts([parent: "all"])
        return products.collect {
            return collectProductTypeContent(templateData, it)
        }
    }

    Map collectArticleTypeContent(TemplateData templateData,  Article article) {
        Map data = DomainUtil.toMap(article, [exclude: ["createdBy", "section"]])
        return data
    }

    List<Map> collectArticleTypeContents(TemplateData templateData) {
        List<Article> articles = contentService.getArticles([:])
        return articles.collect {
            return collectArticleTypeContent(templateData, it)
        }
    }

    Map collectAlbumTypeContent(TemplateData templateData, Album album ) {
        Map data = DomainUtil.toMap(album)
        List<AlbumImage> albumImages = AlbumImage.createCriteria().list {
            eq("parent.id", album.id)
        }
        data.albumImages = []
        albumImages.each {
            data.albumImages.add DomainUtil.toMap(it, [exclude: ["parent"]])
        }
        templateData.resources.add("${appResource.getAlbumRelativeUrl(album.id)}")
        return data
    }

    List<Map> collectAlbumTypeContents(TemplateData templateData) {
        List<Album> albums = Album.findAllByIsInTrash(false)
        return albums.collect {
            return collectAlbumTypeContent(templateData, it)
        }
    }

    Map collectNavigationTypeContent(TemplateData templateData, Navigation navigation) {
        Map data = DomainUtil.toMap(navigation, [exclude: ["items"]])
        Closure collectItem
        collectItem = { NavigationItem item ->
            Map itemData = DomainUtil.toMap(item, [exclude: ["parent", "childItems"]])
            itemData.childItems = []
            NavigationItem.createCriteria().list {
                eq("parent.id", item.id)
                eq("navigation.id", navigation.id)
            }.each {
                itemData.childItems.add collectItem(it)
            }
            templateData.resources.add( "${appResource.getNavigationItemRelativeUrl(item.image)}")
            return itemData
        }
        data.items = []
        NavigationItem.createCriteria().list {
            isNull("parent")
            eq("navigation.id", navigation.id)
        }.each {
            data.items.add collectItem(it)
        }
        return data
    }

    List<Map> collectNavigationTypeContents(TemplateData templateData) {
        List<Navigation> navigations = navigationService.getNavigations([:])
        return navigations.collect {
            return collectNavigationTypeContent(templateData, it)
        }
    }

    void collectWidgetContents(TemplateData templateData) {
        DomainConstants.WIDGET_CONTENT_TYPE.each {String key, String contentType ->
            if(this.respondsTo("collect${contentType.capitalize()}TypeContents")) {
                AppEventManager.fire("before-${contentType}-type-template-content-collect", [templateData])
                templateData.widgetContents[contentType] = this."collect${contentType.capitalize()}TypeContents"(templateData)
            }
        }

    }

    void collectImageWidgetData(TemplateData templateData, Widget widget) {
        templateData.resources.add("${appResource.getImageWidgetRelativeUrl(widget.uuid)}")
    }

    Map collectWidgetData(TemplateData templateData, Widget widget) {
        Map widgetData = DomainUtil.toMap(widget, [exclude: ["widgetContent"]])
        widgetData.widgetContent = []
        widget.widgetContent.each {
            widgetData.widgetContent.add DomainUtil.toMap(it, [exclude: ["widget"]])
        }
        if(this.respondsTo("collect${widget.widgetType.capitalize()}WidgetData")) {
            this."collect${widget.widgetType.capitalize()}WidgetData"(templateData, widget)
        }
        return widgetData
    }

    List<Map> collectWidgetsData(TemplateData templateData, Collection<Widget> widgets) {
        List<Map> widgetsData =  new ArrayList<Map>()
        widgets.each {Widget widget ->
            widgetsData.add collectWidgetData(templateData, widget)
        }
        return widgetsData
    }

    void collectLayouts(TemplateData templateData) {
        List<Layout> layouts = Layout.list()
        layouts.each { Layout layout ->
            List<Widget> widgets = Widget.createCriteria().list {
                eq "containerId", layout.id
                eq "containerType", 'layout'
            }
            Map layoutData = [:]
            layoutData.id = layout.id
            layoutData.name = layout.name
            layoutData.body = layout.body
            layoutData.css = layout.css ?: ""
            layoutData.js = layout.js ?: ""
            layoutData.headerWidgets = collectWidgetsData(templateData, layout.headerWidgets)
            layoutData.footerWidgets = collectWidgetsData(templateData, layout.footerWidgets)
            widgets.removeAll(layout.headerWidgets)
            widgets.removeAll(layout.footerWidgets)
            layoutData.docks = []
            layout.dockableSections.each { dock ->
                Map dockSec = [:]
                dockSec.css = dock.css ?: ""
                dockSec.uuid = dock.uuid
                dockSec.widgets = collectWidgetsData(templateData, dock.widgets)
                layoutData.docks.add(dockSec)
            }
            layoutData.bodyWidgets = collectWidgetsData(templateData, widgets)
            templateData.layouts.add(layoutData)
        }
    }

    void collectPages(TemplateData templateData) {
        List<Page> pages = Page.list()
        pages.each { Page page ->
            List<Widget> widgets = Widget.createCriteria().list {
                eq "containerId", page.id
                eq "containerType", 'page'
            }
            Map pageData = DomainUtil.toMap(page, [exclude: ["headerWidgets", "footerWidgets", "createdBy", "metaTags", "customers", "customerGroups", "dockableSections"]])
            pageData.headerWidgets = collectWidgetsData(templateData, page.headerWidgets)
            widgets.removeAll(page.headerWidgets)
            pageData.footerWidgets = collectWidgetsData(templateData, page.footerWidgets)
            widgets.removeAll(page.footerWidgets)
            pageData.docks = []
            page.dockableSections.each {DockSection dock ->
                Map dockSec = [:]
                dockSec.css = dock.css ?: ""
                dockSec.uuid = dock.uuid
                dockSec.widgets = collectWidgetsData(templateData, dock.widgets)
                pageData.docks.add(dockSec)
            }
            pageData.bodyWidgets = collectWidgetsData(templateData, widgets)
            templateData.pages.add(pageData)
        }
    }

    void collectAutoPageContents(TemplateData templateData) {
        templateData.otherContents["auto_page_content"]= AutoPageContent.list().collect {
            return DomainUtil.toMap(it, [belong: ['default': "name"]])
        }
    }

    void collectResolution(TemplateData templateData) {
        Resolution.list().each {
            templateData.resolutions.add(DomainUtil.toMap(it))
        }
    }

    void collectSiteConfig(TemplateData templateData) {
        templateData.collectSiteConfig(DomainConstants.SITE_CONFIG_TYPES.PRODUCT)
        templateData.collectSiteConfig(DomainConstants.SITE_CONFIG_TYPES.RELATED_PRODUCT)
        templateData.collectSiteConfig(DomainConstants.SITE_CONFIG_TYPES.PRODUCT_PROPERTIES)
        templateData.collectSiteConfig(DomainConstants.SITE_CONFIG_TYPES.PRODUCT_IMAGE)
        templateData.collectSiteConfig(DomainConstants.SITE_CONFIG_TYPES.CATEGORY_PAGE)
        templateData.collectSiteConfig(DomainConstants.SITE_CONFIG_TYPES.CATEGORY_IMAGE)
        templateData.collectSiteConfig(DomainConstants.SITE_CONFIG_TYPES.SEARCH_PAGE)
        templateData.collectSiteConfig(DomainConstants.SITE_CONFIG_TYPES.RESPONSIVE, "is_responsive")
        templateData.collectSiteConfig(DomainConstants.SITE_CONFIG_TYPES.GENERAL, "landing_page")
        templateData.collectSiteConfig(DomainConstants.SITE_CONFIG_TYPES.GENERAL, "default_layout")
        templateData.collectSiteConfig(DomainConstants.SITE_CONFIG_TYPES.GENERAL, "page403")
        templateData.collectSiteConfig(DomainConstants.SITE_CONFIG_TYPES.GENERAL, "page404")
        templateData.collectSiteConfig(DomainConstants.SITE_CONFIG_TYPES.GENERAL, "template_color")
        templateData.collectSiteConfig(DomainConstants.SITE_CONFIG_TYPES.GENERAL, "template_container_class")
    }

    TemplateData getTemplateData() {
        TemplateData templateData = new TemplateData()
        collectWidgetContents(templateData)
        collectLayouts(templateData)
        collectPages(templateData)
        collectSiteConfig(templateData)
        collectAutoPageContents(templateData)
        collectResolution(templateData)
        AutoGeneratedPage.list().each {
            templateData.autoPageMapping[it.id + ""] = [name: it.name, layout: it.layout.id]
        }
        HookManager.hook("provide-template-data", templateData)
        return templateData
    }

    void provideData(OutputStream outputStream ) {
        ZipOutputStream  zipOutputStream = new ZipOutputStream(outputStream)
        TemplateData templateData = getTemplateData()
        String jsonData = (templateData as JSON).toString()
        templateData.resources.each {
            String path = PathManager.getResourceRoot(it)
            File file = new File(path)
            if(file.exists()) {
                ZipUtil.addToZip("resources/$it", file, zipOutputStream)
            }
        }
        ZipUtil.addStreamToZip("", new ByteArrayInputStream(jsonData.getBytes(StandardCharsets.UTF_8)), zipOutputStream, TEMPLATE_DATA_JSON)
        zipOutputStream.close()
    }

    def getAllTemplate(Integer max, Integer offset, String type, String category) {
        Map response = [templateList: [], totalCount: 0]
        try {
            Map map = managementHubBridgeService.listByPOST(TEMPLATE_LIST_URL, offset.toString(), max.toString())
            if (map.isSuccess && map.responseData){
                map = map.responseData
                response.templateList = map.list
                response.totalCount = map.total
            }
        } catch (Throwable t) {
            return response
        }
        return response
    }

    def getTemplateTypesAndCategories() {
        Map response = [types: [], categories: []]
        try {
            Map map = managementHubBridgeService.listByGET(TEMPLATE_TYPE_AND_CATEGORY_URL)
            if (map.isSuccess && map.responseData){
                map = map.responseData
                response.types = map.types
                response.categories = map.categories
            }
        } catch (Throwable t) {
            return response
        }
        return response
    }

    Map getTemplateDetails(String uuid) {
        Map response = [:]
        try {
            Map map = managementHubBridgeService.getByFieldValue(TEMPLATE_DETAILS_URL, "uuid", uuid)
            if (map.isSuccess && map.responseData){
                response = map.responseData
            }
        } catch (Throwable t) {
            return response
        }
        return response
    }

    List getRemoteTemplateInstalledPlugins(String templateUrl){
        List plugins = []
        try{
            String content = HttpUtil.doGetRequest(templateUrl + REMOTE_TEMPLATE_PLUGIN_URL + SimpleEncrypter.getToken())
            plugins = (List) JSON.parse(content)
        }catch (Exception e){}
        return plugins
    }
}
