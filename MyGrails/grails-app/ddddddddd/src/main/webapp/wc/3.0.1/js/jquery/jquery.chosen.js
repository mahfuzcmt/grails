/*!
 Chosen, a Select Box Enhancer for jQuery and Prototype
 by Patrick Filler for Harvest, http://getharvest.com

 Version 1.1.0
 Full source at https://github.com/harvesthq/chosen
 Copyright (c) 2011 Harvest http://getharvest.com

 MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
 This file is generated by `grunt build`, do not edit it by hand.
 */

(function () {
    var $, SelectParser, DOMParser, _ref,
        __hasProp = {}.hasOwnProperty,
        __extends = function (child, parent) {
            for (var key in parent) {
                if (__hasProp.call(parent, key)) child[key] = parent[key];
            }
            function ctor() {
                this.constructor = child;
            }

            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
            return child;
        };

    SelectParser = (function () {
        function SelectParser() {
            this.options_index = 0;
            this.parsed = [];
        }

        SelectParser.prototype.add_node = function (child) {
            if (child.nodeName.toUpperCase() === "OPTGROUP") {
                return this.add_group(child);
            } else {
                return this.add_option(child);
            }
        };

        SelectParser.prototype.add_group = function (group) {
            var group_position, option, _i, _len, _ref, _results;

            group_position = this.parsed.length;
            this.parsed.push({
                array_index: group_position,
                group: true,
                label: this.escapeExpression(group.label),
                children: 0,
                disabled: group.disabled
            });
            _ref = group.childNodes;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                option = _ref[_i];
                _results.push(this.add_option(option, group_position, group.disabled));
            }
            return _results;
        };

        SelectParser.prototype.add_option = function (option, group_position, group_disabled) {
            if (option.nodeName.toUpperCase() === "OPTION") {
                if (option.text !== "") {
                    if (group_position != null) {
                        this.parsed[group_position].children += 1;
                    }
                    var depth = option.getAttribute("depth")
                    depth = depth ? parseInt(depth) : 0
                    this.parsed.push({
                        array_index: this.parsed.length,
                        options_index: this.options_index,
                        value: option.value,
                        text: option.text,
                        html: option.innerHTML,
                        selected: option.selected,
                        disabled: group_disabled === true ? group_disabled : option.disabled,
                        group_array_index: group_position,
                        classes: option.className,
                        style: option.style.cssText,
                        depth: depth
                    });
                } else {
                    this.parsed.push({
                        array_index: this.parsed.length,
                        options_index: this.options_index,
                        empty: true
                    });
                }
                return this.options_index += 1;
            }
        };

        SelectParser.prototype.escapeExpression = function (text) {
            var map, unsafe_chars;

            if ((text == null) || text === false) {
                return "";
            }
            if (!/[\&\<\>\"\'\`]/.test(text)) {
                return text;
            }
            map = {
                "<": "&lt;",
                ">": "&gt;",
                '"': "&quot;",
                "'": "&#x27;",
                "`": "&#x60;"
            };
            unsafe_chars = /&(?!\w+;)|[\<\>\"\'\`]/g;
            return text.replace(unsafe_chars, function (chr) {
                return map[chr] || "&amp;";
            });
        };

        return SelectParser;

    })();

    SelectParser.select_to_array = function (select) {
        var child, parser, _i, _len, _ref;

        parser = new SelectParser();
        _ref = select.childNodes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            parser.add_node(child);
        }
        return parser.parsed;
    };

    DOMParser = (function () {
        function DOMParser() {
            this.options_index = 0;
            this.parsed = [];
        }

        DOMParser.prototype.add_option = function (option) {
            var $option = $(option);
            this.parsed.push({
                array_index: this.parsed.length,
                options_index: this.options_index,
                value: $option.attr("value"),
                text: option.innerHTML.trim(),
                html: option.innerHTML.trim(),
                selected: $option.is(".selected"),
                disabled: $option.is("[disabled]"),
                group_array_index: undefined,
                classes: $option.attr("class"),
                style: option.style.cssText
            });
            return this.options_index += 1;
        }
        return DOMParser;
    })()

    DOMParser.select_to_array = function (select) {
        var child, parser, _i, _len, _ref;

        parser = new DOMParser();
        _ref = $(select).find(".options");
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            parser.add_option(child);
        }
        return parser.parsed;
    }

    window.AbstractChosen = (function () {
        function AbstractChosen(form_field, options) {
            this.form_field = form_field;
            this.is_custom_select = $(this.form_field).is("div.wcui-select")
            if (this.is_custom_select) {
                var select = $("<select></select>", {
                    name: this.form_field.getAttribute("name"),
                    "class": this.form_field.getAttribute("class")
                }).hide()
                $(this.form_field).hide().after(select);
                this.custom_data_source = this.form_field
                this.form_field = select[0];
            }
            this.options = options != null ? options : {};
            this.is_multiple = this.form_field.multiple;
            this.options_updated = true
            this.set_default_text();
            this.set_default_values();
            this.setup();
            this.set_up_html();
            this.register_observers();
        }

        AbstractChosen.prototype.set_default_values = function () {
            var _this = this;
            this.activate_action = function (evt) {
                return _this.activate_field(evt);
            };
            this.active_field = false;
            this.mouse_on_container = false;
            this.results_showing = false;
            this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
            this.disable_search_threshold = this.options.disable_search_threshold || 10;
            this.disable_search = this.options.disable_search || false;
            this.enable_split_word_search = this.options.enable_split_word_search != null ? this.options.enable_split_word_search : true;
            this.group_search = this.options.group_search != null ? this.options.group_search : true;
            this.search_contains = this.options.search_contains || false;
            this.single_backstroke_delete = this.options.single_backstroke_delete != null ? this.options.single_backstroke_delete : true;
            this.max_selected_options = this.options.max_selected_options || Infinity;
            this.inherit_select_classes = this.options.inherit_select_classes || true;
            this.display_selected_options = this.options.display_selected_options != null ? this.options.display_selected_options : true;
            return this.display_disabled_options = this.options.display_disabled_options != null ? this.options.display_disabled_options : true;
        };

        AbstractChosen.prototype.set_default_text = function () {
            if (this.form_field.getAttribute("data-placeholder")) {
                this.default_text = this.form_field.getAttribute("data-placeholder");
            } else if (this.is_multiple) {
                this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || AbstractChosen.default_multiple_text;
            } else {
                this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || AbstractChosen.default_single_text;
            }
            return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || AbstractChosen.default_no_result_text;
        };

        AbstractChosen.prototype.mouse_enter = function () {
            return this.mouse_on_container = true;
        };

        AbstractChosen.prototype.mouse_leave = function () {
            return this.mouse_on_container = false;
        };

        AbstractChosen.prototype.input_focus = function (evt) {
            var _this = this;
            if (this.is_multiple) {
                if (!this.active_field) {
                    return setTimeout((function () {
                        return _this.container_mousedown();
                    }), 50);
                }
            } else {
                if (!this.active_field) {
                    return this.activate_field();
                }
            }
        };

        AbstractChosen.prototype.input_blur = function (evt) {
            var _this = this;
            this.search_field_blur_to_container = false;
            if (this.mouse_on_container) {
                this.search_field_blur_to_container = true;
            } else {
                this.active_field = false;
                return setTimeout((function () {
                    return _this.blur_test();
                }), 100);
            }
        };

        AbstractChosen.prototype.results_option_build = function (options) {
            var content, data, _i, _len, _ref;

            content = '';
            _ref = this.results_data;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                data = _ref[_i];
                if (data.group) {
                    content += this.result_add_group(data);
                } else {
                    content += this.result_add_option(data);
                }
                if (options != null ? options.first : void 0) {
                    if (data.selected && this.is_multiple) {
                        this.choice_build(data);
                    } else if (data.selected && !this.is_multiple) {
                        this.single_set_selected_text(data.text);
                    }
                }
            }
            return content;
        };

        AbstractChosen.prototype.result_add_option = function (option) {
            var classes, option_el;

            if (!option.search_match) {
                return '';
            }
            if (!this.include_option_in_results(option)) {
                return '';
            }
            classes = ["chosen-result"];
            if (!option.disabled && !(option.selected && this.is_multiple)) {
                classes.push("active-result");
            }
            if (option.disabled && !(option.selected && this.is_multiple)) {
                classes.push("disabled-result");
            }
            if (option.selected) {
                classes.push("result-selected");
            }
            if (option.group_array_index != null) {
                classes.push("group-option");
            }
            if (option.classes !== "") {
                classes.push(option.classes);
            }
            option_el = document.createElement("div");
            option_el.className = classes.join(" ");
            option_el.style.cssText = option.style;
            option_el.setAttribute("data-option-array-index", option.array_index);
            if (option.depth > 1) {
                var innerHtml = ""
                for (i = 1; i < option.depth; i++) {
                    innerHtml += "&nbsp;&nbsp;"
                }
                innerHtml = innerHtml + "<span class='child'>-</span>&nbsp;" + option.search_text
            } else {
                var innerHtml = option.search_text;
            }
            option_el.innerHTML = innerHtml;
            return this.outerHTML(option_el);
        };

        AbstractChosen.prototype.result_add_group = function (group) {
            var group_el;
            if (!(group.search_match || group.group_match)) {
                return '';
            }
            if (!(group.active_options > 0)) {
                return '';
            }
            group_el = document.createElement("li");
            group_el.className = "group-result";
            group_el.innerHTML = group.search_text;
            return this.outerHTML(group_el);
        };

        AbstractChosen.prototype.results_update_field = function () {
            this.options_updated = true;
            this.set_default_text();
            if (!this.is_multiple) {
                this.results_reset_cleanup();
            }
            this.result_clear_highlight();
            this.results_build();
            if (this.results_showing) {
                return this.winnow_results();
            }
        };

        AbstractChosen.prototype.reset_single_select_options = function () {
            var result, _i, _len, _ref, _results;
            _ref = this.results_data;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                result = _ref[_i];
                if (result.selected) {
                    _results.push(result.selected = false);
                } else {
                    _results.push(void 0);
                }
            }
            return _results;
        };

        AbstractChosen.prototype.results_toggle = function () {
            if (this.results_showing) {
                return this.results_hide();
            } else {
                return this.results_show();
            }
        };

        AbstractChosen.prototype.results_search = function (evt) {
            if (this.results_showing) {
                return this.winnow_results();
            } else {
                return this.results_show();
            }
        };

        AbstractChosen.prototype.winnow_results = function () {
            var escapedSearchText, option, regex, regexAnchor, results_group, startpos, text, zregex, _i, _len, _ref;
            var is_search_on = !this.search_field[0].readOnly
            var returnVal;
            if (is_search_on || this.options_updated) {
                this.no_results_clear();
                var results = 0;
                var searchText = this.get_search_text();
                escapedSearchText = searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
                regexAnchor = this.search_contains ? "" : "^";
                regex = new RegExp(regexAnchor + escapedSearchText, 'i');
                zregex = new RegExp(escapedSearchText, 'i');
                _ref = this.results_data;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    option = _ref[_i];
                    option.search_match = false;
                    results_group = null;
                    if (this.include_option_in_results(option)) {
                        if (option.group) {
                            option.group_match = false;
                            option.active_options = 0;
                        }
                        if ((option.group_array_index != null) && this.results_data[option.group_array_index]) {
                            results_group = this.results_data[option.group_array_index];
                            if (results_group.active_options === 0 && results_group.search_match) {
                                results += 1;
                            }
                            results_group.active_options += 1;
                        }
                        if (!(option.group && !this.group_search)) {
                            option.search_text = option.group ? option.label : option.html;
                            option.search_match = this.search_string_match(option.search_text, regex);
                            if (option.search_match && !option.group) {
                                results += 1;
                            }
                            if (option.search_match) {
                                if (searchText.length) {
                                    startpos = option.search_text.search(zregex);
                                    text = option.search_text.substr(0, startpos + searchText.length) + '</em>' + option.search_text.substr(startpos + searchText.length);
                                    option.search_text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
                                }
                                if (results_group != null) {
                                    results_group.group_match = true;
                                }
                            } else if ((option.group_array_index != null) && this.results_data[option.group_array_index].search_match) {
                                option.search_match = true;
                            }
                        }
                    }
                }
                this.result_clear_highlight();
                if (results < 1 && searchText.length) {
                    if (is_search_on || this.options_updated) {
                        this.update_results_content("");
                    }
                    returnVal = this.no_results(searchText);
                } else {
                    if (is_search_on || this.options_updated) {
                        this.update_results_content(this.results_option_build());
                    }
                    returnVal = this.winnow_results_set_highlight();
                }
            } else {
                returnVal = this.winnow_results_set_highlight();
            }
            this.dropdown.position({
                my: "left top",
                at: this.is_multiple ? "left bottom+1" : "left bottom",
                of: this.container,
                within: this.container[0].offsetParent
            })
            this.options_updated = false
            return returnVal;
        };

        AbstractChosen.prototype.search_string_match = function (search_string, regex) {
            var part, parts, _i, _len;

            if (regex.test(search_string)) {
                return true;
            } else if (this.enable_split_word_search && (search_string.indexOf(" ") >= 0 || search_string.indexOf("[") === 0)) {
                parts = search_string.replace(/\[|\]/g, "").split(" ");
                if (parts.length) {
                    for (_i = 0, _len = parts.length; _i < _len; _i++) {
                        part = parts[_i];
                        if (regex.test(part)) {
                            return true;
                        }
                    }
                }
            }
        };

        AbstractChosen.prototype.choices_count = function () {
            var option, _i, _len, _ref;

            if (this.selected_option_count != null) {
                return this.selected_option_count;
            }
            this.selected_option_count = 0;
            _ref = this.form_field.options;
            if (_ref) {
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    option = _ref[_i];
                    if (option.selected) {
                        this.selected_option_count += 1;
                    }
                }
            } else {
                this.selected_option_count = this.getSelectedCount();
            }
            return this.selected_option_count;
        };

        AbstractChosen.prototype.choices_click = function (evt) {
            evt.preventDefault();
            if ($(evt.target).is(".search-choice, .search-choice > *") && this.is_multiple && this.results_showing) {
                this.close_field()
            } else if (!(this.results_showing || this.is_disabled || $(evt.target).is(".search-choice, .search-choice > *"))) {
                return this.results_show();
            }
        };

        AbstractChosen.prototype.keyup_checker = function (evt) {
            var stroke, _ref;

            stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
            this.search_field_scale();
            switch (stroke) {
                case 8:
                    if (this.is_multiple && this.backstroke_length < 1 && this.choices_count() > 0) {
                        return this.keydown_backstroke();
                    } else if (!this.pending_backstroke) {
                        this.result_clear_highlight();
                        return this.results_search();
                    }
                    break;
                case 13:
                    evt.preventDefault();
                    if (this.results_showing) {
                        return this.result_select(evt);
                    }
                    break;
                case 27:
                    if (this.results_showing) {
                        this.results_hide();
                    }
                    return true;
                case 9:
                case 38:
                case 40:
                case 16:
                case 91:
                case 17:
                    break;
                default:
                    return this.results_search();
            }
        };

        AbstractChosen.prototype.clipboard_event_checker = function (evt) {
            var _this = this;
            return setTimeout((function () {
                return _this.results_search();
            }), 50);
        };

        AbstractChosen.prototype.include_option_in_results = function (option) {
            if (this.is_multiple && (!this.display_selected_options && option.selected)) {
                return false;
            }
            if (!this.display_disabled_options && option.disabled) {
                return false;
            }
            if (option.empty) {
                return false;
            }
            return true;
        };

        AbstractChosen.prototype.search_results_touchstart = function (evt) {
            this.touch_started = true;
            return this.search_results_mouseover(evt);
        };

        AbstractChosen.prototype.search_results_touchmove = function (evt) {
            this.touch_started = false;
            return this.search_results_mouseout(evt);
        };

        AbstractChosen.prototype.search_results_touchend = function (evt) {
            if (this.touch_started) {
                return this.search_results_mouseup(evt);
            }
        };

        AbstractChosen.prototype.outerHTML = function (element) {
            var tmp;
            if (element.outerHTML) {
                return element.outerHTML;
            }
            tmp = document.createElement("div");
            tmp.appendChild(element);
            return tmp.innerHTML;
        };

        AbstractChosen.prototype.reset_single_select_options = function () {
            var result, _i, _len, _ref, _results;
            _ref = this.results_data;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                result = _ref[_i];
                if (result.selected) {
                    _results.push(result.selected = false);
                } else {
                    _results.push(void 0);
                }
            }
            return _results;
        };

        AbstractChosen.default_multiple_text = "Select Some Options";

        AbstractChosen.default_single_text = "Select an Option";

        AbstractChosen.default_no_result_text = "No results match";
        AbstractChosen.prototype.destroy = function () {
            this.destroy();
        };

        AbstractChosen.prototype.disable = function (disable) {
            var _args = arguments
            var select = this.form_field_jq;
            if (typeof disable == "string") {
                var option = select.find("option[value='" + disable + "']")
                if (_args.length == 2 && !_args[1]) {
                    option.removeAttr("disabled")
                } else {
                    option.attr("disabled", "")
                }
            } else if (disable) {
                select.attr("disabled", "")
            } else {
                select.removeAttr("disabled")
            }
            select.trigger("chosen:updated");
        }

        AbstractChosen.prototype.add = function (option) {
            var select = this.form_field_jq, $option, value = option.value ? option.value : "";
            var $oldOption = select.find("option[value='" + value.replace(/(')/g, "\\$1") + "']");
            if ($oldOption.length) {
                $option = $oldOption.text(option.text)
            } else {
                $option = $("<option></option>", option)
                select.append($option);
            }
            if (option.selected) {
                select.val($option.attr("value"))
            }
            select.trigger("chosen:updated");
        };

        AbstractChosen.prototype.update = function () {
            var select = this.form_field_jq;
            select.trigger("chosen:updated");
        }

        AbstractChosen.prototype.val = function (value) {
            var select = this.form_field_jq;
            if (value != undefined) {
                select.val(value);
                select.trigger("chosen:updated");
                return;
            }
            return select.val();
        }

        AbstractChosen.prototype.remove = function (optionValue) {
            var select = this.form_field_jq;
            if (optionValue) {
                var option = optionValue instanceof $ ? optionValue : select.find("option[value='" + optionValue + "']")
                if (!option.length) {
                    return;
                }
                var wasSelected = option[0].selected
                option.remove();
                if (wasSelected) {
                    select.val(select.find("option:first").val())
                }
                select.trigger("chosen:updated");
                return;
            }
            this.destroy();
            select.remove();
        }

        AbstractChosen.prototype.removeAll = function () {
            this.form_field_jq.find("option").remove()
            this.form_field_jq.val("");
            this.form_field_jq.trigger("chosen:updated");
        }

        AbstractChosen.prototype.dropshow = function () {
            this.form_field_jq.trigger("chosen:open.chosen");
        }
        return AbstractChosen;

    })();

    $ = jQuery;

    $.fn.extend({
        chosen: function (options) {
            var args = arguments;
            if (!this.length) {
                return this;
            }
            var _return;
            $.each(this, function () {
                var $this, chosen;
                $this = $(this);
                chosen = $this.data('wcui-chosen');
                if (typeof options == "string" && chosen) {
                    _return = chosen[options].apply(chosen, Array.prototype.splice.call(args, 1));
                    if (typeof _return != "undefined") {
                        return false;
                    }
                } else if (!chosen) {
                    $.extend(options, $this.config("chosen"))
                    $this.data('wcui-chosen', new Chosen(this, options));
                }
            });
            if (_return) {
                return _return
            }
            return this;
        }
    });

    window.Chosen = (function (_super) {
        __extends(Chosen, _super);

        function Chosen() {
            _ref = Chosen.__super__.constructor.apply(this, arguments);
            return _ref;
        }

        Chosen.prototype.setup = function () {
            this.form_field_jq = $(this.form_field);
            this.current_selectedIndex = this.form_field.selectedIndex;
            return this.is_rtl = this.form_field_jq.hasClass("chosen-rtl");
        };

        Chosen.prototype.set_up_html = function () {
            var container_classes, container_props;

            container_classes = ["chosen-container"];
            container_classes.push("chosen-container-" + (this.is_multiple ? "multi" : "single"));
            if (this.inherit_select_classes && this.form_field.className) {
                container_classes.push(this.form_field.className);
            }
            if (this.is_rtl) {
                container_classes.push("chosen-rtl");
            }
            container_props = {
                'class': container_classes.join(' '),
                'title': this.form_field.title
            };
            if (this.form_field.id.length) {
                container_props.id = this.form_field.id.replace(/[^\w]/g, '_') + "_chosen";
            }
            this.container = $("<div />", container_props);
            if (this.form_field_jq.attr("validation") && !this.form_field_jq.is("[error-on]")) {
                var containerId = container_props.id
                if (!containerId) {
                    containerId = bm.getUUID();
                    this.container.attr("id", containerId)
                }
                this.form_field_jq.attr('error-on', containerId);
            }
            if (this.is_multiple) {
                this.container.html('<ul class="chosen-choices"><li class="search-field"><input type="text" value="' + this.default_text + '" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chosen-drop"><div class="chosen-results"></div></div>');
            } else {
                this.container.html('<a class="chosen-single chosen-default" tabindex="-1"><span>' + this.default_text + '</span><div><b></b></div></a><div class="chosen-drop"><div class="chosen-search"><input type="text" autocomplete="off" /></div><div class="chosen-results"></div></div>');
            }
            var chosenResult = this.container.find(".chosen-results")
            chosenResult.scrollbar({
                vertical: {
                    offset: -2,
                    step: "auto"
                }
            })
            chosenResult.css({maxHeight: 120 + "px"});
            this.form_field_jq.hide().after(this.container);
            this.dropdown = this.container.find('div.chosen-drop').first();
            this.search_field = this.container.find('input').first().change(function (ev) {
                //to keep a mark that this is not a change event for form input field
                ev.originalEvent.ignore = true
            });
            this.search_results = this.container.find('.chosen-results').first();
            this.search_field_scale();
            if (this.is_multiple) {
                this.search_choices = this.container.find('ul.chosen-choices').first();
                this.search_container = this.container.find('li.search-field').first();
            } else {
                this.search_container = this.container.find('div.chosen-search').first();
                this.selected_item = this.container.find('.chosen-single').first();
            }
            this.results_build();
            this.set_tab_index();
            this.set_label_behavior();
            return this.form_field_jq.trigger("chosen:ready", {
                chosen: this
            });
        };

        Chosen.prototype.register_observers = function () {
            var _this = this;

            this.container.bind('mousedown.chosen', function (evt) {
                _this.container_mousedown(evt);
            });
            this.container.bind('mouseup.chosen', function (evt) {
                _this.container_mouseup(evt);
            });
            this.container.bind('mouseenter.chosen', function (evt) {
                _this.mouse_enter(evt);
            });
            this.container.bind('mouseleave.chosen', function (evt) {
                _this.mouse_leave(evt);
            });
            this.search_results.bind('mouseover.chosen', function (evt) {
                _this.search_results_mouseover(evt);
            });
            this.search_results.bind('mouseup.chosen', function (evt) {
                _this.search_results_mouseup(evt);
            });
            this.search_results.bind('mouseout.chosen', function (evt) {
                _this.search_results_mouseout(evt);
            });
            this.form_field_jq.bind("chosen:updated.chosen", function (evt) {
                _this.results_update_field(evt);
            });
            this.form_field_jq.bind("chosen:activate.chosen", function (evt) {
                _this.activate_field(evt);
            });
            this.form_field_jq.bind("chosen:open.chosen", function (evt) {
                _this.container_mousedown(evt);
            });
            this.form_field_jq.bind("chosen:close.chosen", function (evt) {
                _this.input_blur(evt);
            });
            this.search_field.bind('blur.chosen', function (evt) {
                _this.input_blur(evt);
            });
            this.search_field.bind('keyup.chosen', function (evt) {
                _this.keyup_checker(evt);
            });
            this.search_field.bind('keydown.chosen', function (evt) {
                _this.keydown_checker(evt);
            });
            this.search_field.bind('focus.chosen', function (evt) {
                _this.input_focus(evt);
            });
            this.search_field.bind('cut.chosen', function (evt) {
                _this.clipboard_event_checker(evt);
            });
            this.search_field.bind('paste.chosen', function (evt) {
                _this.clipboard_event_checker(evt);
            });
            if (this.is_multiple) {
                return this.search_choices.bind('click.chosen', function (evt) {
                    _this.choices_click(evt);
                });
            } else {
                return this.container.bind('click.chosen', function (evt) {
                    evt.preventDefault();
                });
            }
        };

        Chosen.prototype.destroy = function () {
            if (this.search_field[0].tabIndex) {
                this.form_field_jq[0].tabIndex = this.search_field[0].tabIndex;
            }
            if (this.is_custom_select) {
                this.form_field.remove();
            }
            this.container.remove();
            this.form_field_jq.removeData('wcui-chosen');
            return this.form_field_jq.show();
        };

        Chosen.prototype.search_field_disabled = function () {
            this.is_disabled = this.form_field_jq[0].disabled;
            if (this.is_disabled) {
                this.container.addClass('chosen-disabled');
                this.search_field[0].disabled = true;
                if (!this.is_multiple) {
                    this.selected_item.unbind("focus.chosen", this.activate_action);
                }
                return this.close_field();
            } else {
                this.container.removeClass('chosen-disabled');
                this.search_field[0].disabled = false;
                if (!this.is_multiple) {
                    return this.selected_item.bind("focus.chosen", this.activate_action);
                }
            }
        };

        Chosen.prototype.container_mousedown = function (evt) {
            if (!this.is_disabled) {
                if (evt && evt.type === "mousedown" && !this.results_showing) {
                    evt.preventDefault();
                }
                if (!((evt != null) && $(evt.target).is(".search-choice, .search-choice > *"))) {
                    if (!this.active_field) {
                        if (this.is_multiple) {
                            this.search_field.val("");
                        }
                        this.results_show();
                    } else if (!this.is_multiple && evt && (($(evt.target)[0] === this.selected_item[0]) || $(evt.target).parents("a.chosen-single").length)) {
                        evt.preventDefault();
                        this.results_toggle();
                    }
                    this.search_activated_for_mousedown = true
                    return this.activate_field();
                }
            }
        };

        Chosen.prototype.container_mouseup = function (evt) {
            if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
                return this.results_reset(evt);
            }
            if (this.search_activated_for_mousedown || (this.is_multiple && this.search_field_blur_to_container && !$(evt.target).is(".search-choice, .search-choice > *"))) {
                this.search_activated_for_mousedown = false
                this.search_field.focus()
            }
        };

        Chosen.prototype.search_results_mousewheel = function (evt) {
            var delta;
            if (evt.originalEvent) {
                delta = -evt.originalEvent.wheelDelta || evt.originalEvent.detail;
            }
            if (delta != null) {
                evt.preventDefault();
                if (evt.type === 'DOMMouseScroll') {
                    delta = delta * 40;
                }
                return this.search_results.scrollTop(delta + this.search_results.scrollTop());
            }
        };

        Chosen.prototype.blur_test = function (evt) {
            if (!this.active_field && this.container.hasClass("chosen-container-active")) {
                return this.close_field();
            }
        };

        Chosen.prototype.close_field = function () {
            this.active_field = false;
            this.results_hide();
            this.container.removeClass("chosen-container-active");
            this.clear_backstroke();
            this.show_search_field_default();
            return this.search_field_scale();
        };

        Chosen.prototype.activate_field = function () {
            this.container.addClass("chosen-container-active");
            this.active_field = true;
            this.search_field.val(this.search_field.val());
            return this.search_field.focus()
        };

        Chosen.prototype.results_build = function () {
            var _self = this;
            this.parsing = true;
            this.selected_option_count = null;
            this.results_data = this.is_custom_select ? DOMParser.select_to_array(this.custom_data_source) : SelectParser.select_to_array(this.form_field);
            if (this.is_custom_select) {
                _self.form_field_jq.empty();
                this.results_data.every(function () {
                    var option = $("<option></option>", {
                        value: this.value
                    })
                    if (this.selected) {
                        option.attr("selected", "selected")
                    }
                    _self.form_field_jq.append(option)
                });
            }
            if (this.is_multiple) {
                this.search_choices.find("li.search-choice").remove();
            } else if (!this.is_multiple) {
                this.single_set_selected_text();
                var optionLength = this.is_custom_select ? this.form_field_jq.find(".options").length : (this.form_field.options ? this.form_field.options.length : 0);
                if (this.disable_search || optionLength <= this.disable_search_threshold) {
                    this.search_field[0].readOnly = true;
                    this.container.addClass("chosen-container-single-nosearch");
                } else {
                    this.search_field[0].readOnly = false;
                    this.container.removeClass("chosen-container-single-nosearch");
                }
            }
            this.update_results_content(this.results_option_build({
                first: true
            }));
            this.search_field_disabled();
            this.show_search_field_default();
            this.search_field_scale();
            return this.parsing = false;
        };

        Chosen.prototype.result_do_highlight = function (el) {
            var high_bottom, high_top, maxHeight, visible_bottom, visible_top;

            if (el.length) {
                this.result_clear_highlight();
                this.result_highlight = el;
                this.result_highlight.addClass("highlighted");
                maxHeight = parseInt(this.search_results.css("maxHeight"), 10);
                visible_top = this.search_results.scrollTop();
                visible_bottom = maxHeight + visible_top;
                high_top = this.result_highlight.position().top + this.search_results.scrollTop();
                high_bottom = high_top + this.result_highlight.outerHeight();
                if (high_bottom >= visible_bottom) {
                    return this.search_results.scrollTop((high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0);
                } else if (high_top < visible_top) {
                    return this.search_results.scrollTop(high_top);
                }
            }
        };

        Chosen.prototype.result_clear_highlight = function () {
            if (this.result_highlight) {
                this.result_highlight.removeClass("highlighted");
            }
            return this.result_highlight = null;
        };

        Chosen.prototype.results_show = function () {
            if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
                this.form_field_jq.trigger("chosen:maxselected", {
                    chosen: this
                });
                return false;
            }
            var isOptionShowsAtBottom = this.container.hasClass("always-bottom");

            this.container.addClass("chosen-with-drop");
            this.results_showing = true;
            this.search_field.focus();
            this.search_field.val(this.search_field.val());
            this.winnow_results();

            if (!isOptionShowsAtBottom) {
                var $window = $(window);
                var parent = this.container.parents(".scrollable.vertical").first();
                var top = this.container.offset().top;
                if (parent.length) {
                    $window = parent;
                    top = top - $window.offset().top;
                }
                var dropDown = this.container.find(".chosen-drop");
                var containerHeight = this.container.height();
                var bottom = $window.height() - (top + containerHeight);
                if (bottom > dropDown.height()) {
                    this.container.find(".chosen-drop").css({top: containerHeight * 1.18});
                } else {
                    this.container.find(".chosen-drop").css({top: -dropDown.height()});
                }
            }

            return this.form_field_jq.trigger("chosen:showing_dropdown", {
                chosen: this
            });
        };

        Chosen.prototype.update_results_content = function (content) {
            this.search_results.find(".chosen-result").remove()
            this.search_results.prepend(content);
            if (this.search_results.is(".scrollable") && this.search_results.obj() instanceof Scrollbar) {
                this.search_results.scrollbar("update");
            }
        };

        Chosen.prototype.results_hide = function () {
            if (this.results_showing) {
                this.result_clear_highlight();
                this.container.removeClass("chosen-with-drop");
                this.form_field_jq.trigger("chosen:hiding_dropdown", {
                    chosen: this
                });
            }
            return this.results_showing = false;
        };

        Chosen.prototype.set_tab_index = function (el) {
            var ti;

            if (this.form_field.tabIndex) {
                ti = this.form_field.tabIndex;
                this.form_field.tabIndex = -1;
                return this.search_field[0].tabIndex = ti;
            }
        };

        Chosen.prototype.set_label_behavior = function () {
            var _this = this;

            this.form_field_label = this.form_field_jq.parents("label");
            if (!this.form_field_label.length && this.form_field.id.length) {
                this.form_field_label = $("label[for='" + this.form_field.id + "']");
            }
            if (this.form_field_label.length > 0) {
                return this.form_field_label.bind('click.chosen', function (evt) {
                    if (_this.is_multiple) {
                        return _this.container_mousedown(evt);
                    } else {
                        return _this.activate_field();
                    }
                });
            }
        };

        Chosen.prototype.show_search_field_default = function () {
            if (this.is_multiple && this.choices_count() < 1 && !this.active_field) {
                this.search_field.val(this.default_text);
                return this.search_field.addClass("default");
            } else {
                this.search_field.val("");
                return this.search_field.removeClass("default");
            }
        };

        Chosen.prototype.search_results_mouseup = function (evt) {
            var target;

            target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
            if (target.length) {
                this.result_highlight = target;
                this.result_select(evt);
                return this.search_field.focus();
            }
        };

        Chosen.prototype.search_results_mouseover = function (evt) {
            var target;

            target = $(evt.target).hasClass("active-result") ? $(evt.target) : $(evt.target).parents(".active-result").first();
            if (target) {
                return this.result_do_highlight(target);
            }
        };

        Chosen.prototype.search_results_mouseout = function (evt) {
            if ($(evt.target).hasClass("active-result" || $(evt.target).parents('.active-result').first())) {
                return this.result_clear_highlight();
            }
        };

        Chosen.prototype.choice_build = function (item) {
            var choice, close_link,
                _this = this;

            choice = $('<li />', {
                "class": "search-choice"
            }).html("<span>" + item.html + "</span>");
            if (item.disabled) {
                choice.addClass('search-choice-disabled');
            } else {
                close_link = $('<a />', {
                    "class": 'search-choice-close',
                    'data-option-array-index': item.array_index
                });
                close_link.bind('click.chosen', function (evt) {
                    return _this.choice_destroy_link_click(evt);
                });
                choice.append(close_link);
            }
            /*if(_this.before_choice_chose) {
             var pass = this.before_choice_chose(choice);
             if(pass === false) {
             return;
             }
             }*/
            return this.search_container.before(choice);
        };

        Chosen.prototype.choice_destroy_link_click = function (evt) {
            if (this.before_choice_close) {
                var pass = this.before_choice_close($(evt.target).closest("li"))
                if (pass === false) {
                    return;
                }
            }
            if (!this.is_disabled) {
                return this.choice_destroy($(evt.target));
            }
        };

        Chosen.prototype.choice_value = function (link) {
            if (link.is("li")) {
                link = link.find("a.search-choice-close")
            }
            var pos = link[0].getAttribute("data-option-array-index")
            return this.form_field.options[this.results_data[pos].options_index].value
        }

        Chosen.prototype.choice_destroy = function (link) {
            var pos = link[0].getAttribute("data-option-array-index")
            if (this.result_deselect(pos)) {
                this.show_search_field_default();
                if (this.is_multiple && this.choices_count() > 0 && this.search_field.val().length < 1) {
                    this.results_hide();
                }
                link.parents('li').first().remove();
                var result_data = this.results_data[pos];
                var value = this.form_field.options[result_data.options_index].value
                this.form_field_jq.trigger("selection_removed", value);
                this.form_field_jq.trigger("change", [value, undefined]);
                return this.search_field_scale();
            }
        };

        Chosen.prototype.results_reset = function () {
            this.reset_single_select_options();
            var previousValue = this.is_multiple ? null : (this.form_field.selectedIndex > -1 ? this.form_field.options[this.form_field.selectedIndex].value : null)
            this.form_field.options[0].selected = true;
            this.single_set_selected_text();
            this.show_search_field_default();
            this.results_reset_cleanup();
            var value = this.form_field.options[0].value
            this.form_field_jq.trigger("change", [this.is_multiple ? undefined : previousValue, value]);
            if (this.active_field) {
                return this.results_hide();
            }
        };

        Chosen.prototype.results_reset_cleanup = function () {
            this.current_selectedIndex = this.form_field.selectedIndex;
            return this.selected_item.find("abbr").remove();
        };

        Chosen.prototype.result_select = function (evt) {
            var high, item;
            if (this.before_choice_chose) {
                var pass = this.before_choice_chose(evt);
                if (pass === false) {
                    return;
                }
            }
            if (this.result_highlight) {
                high = this.result_highlight;
                this.result_clear_highlight();
                if (this.is_multiple && this.max_selected_options <= this.choices_count()) {
                    this.form_field_jq.trigger("chosen:maxselected", {
                        chosen: this
                    });
                    return false;
                }
                if (!this.is_multiple) {
                    this.reset_single_select_options();
                    high.siblings(".result-selected").removeClass("result-selected")
                    high.addClass("result-selected");
                }
                item = this.results_data[high[0].getAttribute("data-option-array-index")];
                item.selected = true;
                this.form_field.options[item.options_index].selected = true;
                this.selected_option_count = null;
                if (this.is_multiple) {
                    this.choice_build(item);
                } else {
                    this.single_set_selected_text(item.text);
                }
                this.results_hide();
                this.search_field.val("");
                var currentSelectedIndex, currentSelectedValue;
                currentSelectedIndex = this.form_field.selectedIndex
                currentSelectedValue = this.form_field.options[item.options_index].value;
                var oldIndex = this.current_selectedIndex
                this.current_selectedIndex = currentSelectedIndex
                var _return = this.search_field_scale();
                var _this = this
                setTimeout(function () {
                    if (_this.is_multiple) {
                        _this.form_field_jq.trigger("selection_added", [currentSelectedValue]);
                        _this.form_field_jq.trigger("change", [undefined, currentSelectedValue]);
                    } else if (currentSelectedIndex !== oldIndex) {
                        _this.form_field_jq.trigger("change", [oldIndex > -1 ? _this.form_field.options[oldIndex].value : undefined, currentSelectedValue])
                    }
                }, 10)
                return _return
            }
        };

        Chosen.prototype.get_ordered_selection = function () {
            var _this = this
            if (this.is_multiple) {
                var values = []
                this.search_container.siblings(".search-choice").each(function () {
                    values.push(_this.results_data[$(this).find(".search-choice-close").attr("data-option-array-index")].value)
                })
                return values
            }
        };

        Chosen.prototype.make_selection_sortable = function () {
            var _this = this
            if (this.is_multiple) {
                this.search_choices.sortable({
                    items: ".search-choice",
                    update: function () {
                        _this.form_field_jq.trigger("chosen:re_ordered")
                    }
                })
            }
        };

        Chosen.prototype.single_set_selected_text = function (text) {
            if (text == null) {
                text = this.default_text;
            }
            if (text === this.default_text) {
                this.selected_item.addClass("chosen-default");
            } else {
                this.single_deselect_control_build();
                this.selected_item.removeClass("chosen-default");
            }
            if (this.is_custom_select) {
                return this.selected_item.find("span").html(text);
            }
            return this.selected_item.find("span").text(text);
        };

        Chosen.prototype.result_deselect = function (pos) {
            var result_data;

            result_data = this.results_data[pos];
            if (!this.form_field.options[result_data.options_index].disabled) {
                result_data.selected = false;
                this.form_field.options[result_data.options_index].selected = false;
                this.selected_option_count = null;
                this.result_clear_highlight();
                if (this.results_showing) {
                    this.winnow_results();
                }
                return true;
            } else {
                return false;
            }
        };

        Chosen.prototype.single_deselect_control_build = function () {
            if (!this.allow_single_deselect) {
                return;
            }
            if (!this.selected_item.find("abbr").length) {
                this.selected_item.find("span").first().after("<abbr class=\"search-choice-close\"></abbr>");
            }
            return this.selected_item.addClass("chosen-single-with-deselect");
        };

        Chosen.prototype.get_search_text = function () {
            if (this.search_field.val() === this.default_text) {
                return "";
            } else {
                return $('<div/>').text($.trim(this.search_field.val())).html();
            }
        };

        Chosen.prototype.winnow_results_set_highlight = function () {
            var do_high, selected_results;

            selected_results = !this.is_multiple ? this.search_results.find(".result-selected.active-result") : [];
            do_high = selected_results.length ? selected_results.first() : this.search_results.find(".active-result").first();
            if (do_high != null) {
                return this.result_do_highlight(do_high);
            }
        };

        Chosen.prototype.no_results = function (terms) {
            var no_results_html;

            no_results_html = $('<li class="no-results">' + this.results_none_found + ' "<span></span>"</li>');
            no_results_html.find("span").first().html(terms);
            this.search_results.append(no_results_html);
            return this.form_field_jq.trigger("chosen:no_results", {
                chosen: this
            });
        };

        Chosen.prototype.no_results_clear = function () {
            return this.search_results.find(".no-results").remove();
        };

        Chosen.prototype.keydown_arrow = function () {
            var next_sib;

            if (this.results_showing && this.result_highlight) {
                next_sib = this.result_highlight.nextAll("div.active-result").first();
                if (next_sib) {
                    var _return = this.result_do_highlight(next_sib);
                    this.search_results.scrollbar("update")
                    return _return
                }
            } else {
                return this.results_show();
            }
        };

        Chosen.prototype.keyup_arrow = function () {
            var prev_sibs;

            if (!this.results_showing && !this.is_multiple) {
                return this.results_show();
            } else if (this.result_highlight) {
                prev_sibs = this.result_highlight.prevAll("div.active-result");
                if (prev_sibs.length) {
                    var _return = this.result_do_highlight(prev_sibs.first());
                    this.search_results.scrollbar("update")
                    return _return
                } else {
                    if (this.choices_count() > 0) {
                        this.results_hide();
                    }
                    return this.result_clear_highlight();
                }
            }
        };

        Chosen.prototype.keydown_backstroke = function () {
            var next_available_destroy;

            if (this.pending_backstroke) {
                this.choice_destroy(this.pending_backstroke.find("a").first());
                return this.clear_backstroke();
            } else {
                next_available_destroy = this.search_container.siblings("li.search-choice").last();
                if (next_available_destroy.length && !next_available_destroy.hasClass("search-choice-disabled")) {
                    this.pending_backstroke = next_available_destroy;
                    if (this.single_backstroke_delete) {
                        return this.keydown_backstroke();
                    } else {
                        return this.pending_backstroke.addClass("search-choice-focus");
                    }
                }
            }
        };

        Chosen.prototype.clear_backstroke = function () {
            if (this.pending_backstroke) {
                this.pending_backstroke.removeClass("search-choice-focus");
            }
            return this.pending_backstroke = null;
        };

        Chosen.prototype.keydown_checker = function (evt) {
            var stroke, _ref1;

            stroke = (_ref1 = evt.which) != null ? _ref1 : evt.keyCode;
            this.search_field_scale();
            if (stroke !== 8 && this.pending_backstroke) {
                this.clear_backstroke();
            }
            switch (stroke) {
                case 8:
                    this.backstroke_length = this.search_field.val().length;
                    break;
                case 9:
                    if (this.results_showing && !this.is_multiple) {
                        this.result_select(evt);
                    }
                    this.mouse_on_container = false;
                    break;
                case 13:
                    evt.preventDefault();
                    break;
                case 38:
                    evt.preventDefault();
                    this.keyup_arrow();
                    break;
                case 40:
                    evt.preventDefault();
                    this.keydown_arrow();
                    break;
            }
        };

        Chosen.prototype.search_field_scale = function () {
            var div, f_width, h, style, style_block, styles, w, _i, _len;

            if (this.is_multiple) {
                h = 0;
                w = 0;
                style_block = "position:absolute; left: -1000px; top: -1000px; display:none;";
                styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
                for (_i = 0, _len = styles.length; _i < _len; _i++) {
                    style = styles[_i];
                    style_block += style + ":" + this.search_field.css(style) + ";";
                }
                div = $('<div />', {
                    'style': style_block
                });
                div.text(this.search_field.val());
                $('body').append(div);
                w = div.width() + 25;
                div.remove();
                f_width = this.container.outerWidth();
                if (w > f_width - 10) {
                    w = f_width - 10;
                }
                var m_width = this.form_field_jq.attr("min-width");
                if (m_width && m_width > w) {
                    w = m_width;
                }
                return this.search_field.css({
                    'width': w + 'px'
                });
            }
        };

        return Chosen;

    })(AbstractChosen);

}).call(this);