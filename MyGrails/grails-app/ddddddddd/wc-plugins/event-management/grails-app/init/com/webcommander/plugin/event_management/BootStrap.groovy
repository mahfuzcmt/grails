package com.webcommander.plugin.event_management

import com.webcommander.AppResourceTagLib
import com.webcommander.AutoGeneratedPage
import com.webcommander.acl.Permission
import com.webcommander.acl.RolePermission
import com.webcommander.admin.ConfigService
import com.webcommander.admin.Role
import com.webcommander.common.ImageService
import com.webcommander.config.EmailTemplate
import com.webcommander.config.SiteConfig
import com.webcommander.constants.DomainConstants
import com.webcommander.constants.NamedConstants
import com.webcommander.design.Layout
import com.webcommander.design.WidgetService
import com.webcommander.manager.HookManager
import com.webcommander.manager.LicenseManager
import com.webcommander.plugin.event_management.mixin_service.WidgetService as ECWS
import com.webcommander.tenant.TenantContext
import com.webcommander.util.AppUtil
import com.webcommander.util.PluginDestroyUtil
import grails.util.Holders

class BootStrap {

    private final String EVENT = "event"
    private final String VENUE_LOCATION_DETAILS_PAGE = "venue"
    private final String EVENT_MANAGEMENT = "event_management"

    List domain_constants = [
            [constant:"SITE_CONFIG_TYPES", key: "EVENT_WIDGET", value: "event_widget"],
            [constant:"WIDGET_TYPE", key: "EVENT", value: EVENT],
            [constant:"WIDGET_CONTENT_TYPE", key: "EVENT", value: EVENT],
            [constant:"WIDGET_CONTENT_TYPE", key: "VENUE_LOCATION", value: "venueLocation"],
            [constant:"SITE_CONFIG_TYPES", key: "EVENT_SESSION_SETTING", value: "event_session_setting"],
            [constant:"AUTO_GENERATED_PAGES", key: "EVENT_DETAILS", value: EVENT],
            [constant:"AUTO_GENERATED_PAGES", key: "VENUE_LOCATION_DETAILS_PAGE", value: VENUE_LOCATION_DETAILS_PAGE],
            [constant:"DEFAULT_IMAGES", key: "event", value: "event-image"],
            [constant:"DEFAULT_IMAGES", key: "venue-location", value: "location-image"],
            [constant:"EMAIL_TYPE", key: "EVENT_MANAGEMENT", value: EVENT_MANAGEMENT]
    ]

    List named_constants = [
            [constant:"IMAGE_RESIZE_TYPE", key: "EVENT_IMAGE", value:"event-image"],
            [constant:"IMAGE_RESIZE_TYPE", key: "LOCATION_IMAGE", value:"location-image"],
            [constant:"EMAIL_SETTING_MESSAGE_KEYS", key: EVENT_MANAGEMENT, value:"event.management"],
            [constant:"WIDGET_MESSAGE_KEYS", key: EVENT+ ".title", value:"event.widget"],
            [constant:"WIDGET_MESSAGE_KEYS", key: EVENT+ ".label", value:EVENT],
            [constant:"CART_OBJECT_TYPES", key: "EVENT_TICKET", value:"event_ticket"]
    ]

    def session_setting_data = [
            'enable_session_for_event' : 'true',
            'force_session_selection_during_booking': 'true',
            'include_session_topic_in_event_display': 'true',
            'supply_personalized_program_with_booking': 'true'
    ]
    List permissions =  [
            ["edit", true], ["remove", true], ["create", false], ["view.list", false], ["edit.permission", false]
    ]
    def templates = [
            [label: "new.venue.location.invitation", identifier: "new-venue-location-invitation", subject: "An invitation for a location has made", type: EVENT_MANAGEMENT],
            [label: "location.invitation.approved", identifier: "location-invitation-approved", subject: "Your requested location has been approved", type: EVENT_MANAGEMENT],
            [label: "equipment.invitation.approved", identifier: "equipment-invitation-approved", subject: "Your requested equipment has been approved", type: EVENT_MANAGEMENT],
            [label: "new.complementary.ticket", identifier: "new-complementary-ticket", subject: "Complimentary ticket(s) has been booked for you", isActiveReadonly: true, type: EVENT_MANAGEMENT],
            [label: "new.purchase.ticket", identifier: "new-purchase-ticket", subject: "Your ticket(s) for %event_name%", isActiveReadonly: true, type: EVENT_MANAGEMENT],
            [label: "new.equipment.invitation", identifier: "new-equipment-invitation-request", subject: "An invitation for an equipment has made", type: EVENT_MANAGEMENT],
            [label: "personalized.program", identifier: "personalized-program", subject: "Personalized Program for %event_name%", isActiveReadonly: true, type: EVENT_MANAGEMENT, contentType: DomainConstants.EMAIL_CONTENT_TYPE.TEXT_HTML]
    ]

    def tenantInit = { tenant ->
        DomainConstants.addConstant(domain_constants)
        NamedConstants.addConstant(named_constants)
        ConfigService.addTab("sessionSetting", [
                url: "eventAdmin/loadSessionSettingView",
                message_key: "event.session",
                license: "allow_event_feature"
        ])

        if(!Permission.findByType("event")) {
            Role role = Role.findByName("Admin")
            permissions.each { entry ->
                Permission permission =  new Permission(name: entry[0], label: entry[0], applicableOnEntity: entry[1], type: "event").save()
                new RolePermission(role: role, permission: permission, isAllowed: true).save()
            }
        }

        if(SiteConfig.findAllByType("event_session_setting").size() == 0) {
            session_setting_data.each { entry ->
                new SiteConfig(type: "event_session_setting", configKey: entry.key, value: entry.value).save()
            }
        }

        if(!AutoGeneratedPage.findByName(DomainConstants.AUTO_GENERATED_PAGES.EVENT_DETAILS)) {
            new AutoGeneratedPage(name: DomainConstants.AUTO_GENERATED_PAGES.EVENT_DETAILS, title: "Event Details - %EVENT_NAME%", layout: Layout.first()).save()
        }

        if(!AutoGeneratedPage.findByName(DomainConstants.AUTO_GENERATED_PAGES.VENUE_LOCATION_DETAILS_PAGE)) {
            new AutoGeneratedPage(name: DomainConstants.AUTO_GENERATED_PAGES.VENUE_LOCATION_DETAILS_PAGE, title: "Venue Location Details Page - %LOCATION%",
                    layout: Layout.first()).save()
        }

        if(!EmailTemplate.findAllByType(DomainConstants.EMAIL_TYPE.EVENT_MANAGEMENT).size()) {
            templates.each {
                new EmailTemplate(it).save()
            }
        }
        AppUtil.initializeDefaultImages(['event', 'venue-location'])
    }

    def tenantDestroy = { tenant ->
        ConfigService.removeTab("sessionSetting")
        PluginDestroyUtil util = new PluginDestroyUtil()
        util.removeEmailTemplates(*templates.identifier)
        util.removeAutoPage(VENUE_LOCATION_DETAILS_PAGE, EVENT)
        util.removeSiteConfig("event_session_setting")
        util.removePermission(EVENT)
        NamedConstants.removeConstant(named_constants)
        DomainConstants.removeConstant(domain_constants)
        EventManagementResourceTagLib.RESOURCES_PATH.each { resource ->
            util.deleteResourceFolders(resource.value)
        }
    }

    def init = { servletContext ->
        Holders.grailsApplication.mainContext.getBean(WidgetService).metaClass.mixin ECWS
        Holders.grailsApplication.mainContext.getBean(AppResourceTagLib).metaClass.mixin EventManagementResourceTagLib
        ImageService.RESIZABLE_IMAGE_SIZES.put("event-image", [
            100: [100, 100],
            300: [300,300]
        ])
        ImageService.RESIZABLE_IMAGE_SIZES.put("location-image", [
            100: [100, 100],
            300: [300,300]
        ])

        TenantContext.eachParallelWithWait(tenantInit)

        HookManager.register(EVENT + "-breadcrumb") { response ->
            response.currentItem = AppUtil.request.macros.EVENT_NAME
            return response
        }

        HookManager.register(VENUE_LOCATION_DETAILS_PAGE + "-breadcrumb") { response ->
            response.currentItem = AppUtil.request.macros.LOCATION
            return response
        }
        HookManager.register("available-widgets") { widgets ->
            if(LicenseManager.isProvisionActive() && !LicenseManager.license("allow_event_feature")) {
                def modified = new ArrayList<String>(widgets)
                modified.removeAll {it == "event"}
                modified
            }
        }

    }
}