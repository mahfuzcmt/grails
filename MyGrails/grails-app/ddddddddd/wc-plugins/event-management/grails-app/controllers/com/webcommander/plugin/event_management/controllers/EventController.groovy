package com.webcommander.plugin.event_management.controllers

import com.webcommander.admin.Customer
import com.webcommander.authentication.annotations.AutoGeneratedPage
import com.webcommander.constants.DomainConstants
import com.webcommander.plugin.event_management.Event
import com.webcommander.plugin.event_management.EventSession
import com.webcommander.plugin.event_management.VenueLocation
import com.webcommander.plugin.event_management.VenueLocationSection
import com.webcommander.plugin.event_management.webmarketing.EventService
import com.webcommander.util.AppUtil
import grails.converters.JSON
import com.webcommander.manager.HookManager

class EventController {

    EventService eventService

    @AutoGeneratedPage("venue")
    def venueLocation() {
        VenueLocation location = VenueLocation.findByUrl(params.url)
        if(!location) {
            response.setStatus(404)
            forward(controller: "exception", action: "handle404")
            return
        }
        String view = "/site/siteAutoPage";
        Map model = [name : DomainConstants.AUTO_GENERATED_PAGES.VENUE_LOCATION_DETAILS_PAGE, location: location, macros: [LOCATION: location.name],
                     view: "/plugins/event_management/site/venueLocationDetails.gsp"];
        view = HookManager.hook("auto-page-view-model", view, model);
        render (view: view, model: model)
    }

    @AutoGeneratedPage("event")
    def details() {
        Long id = params.id.toLong(0)
        Event event = Event.findById(id)
        if (!event) {
            response.setStatus(404)
            forward(controller: "exception", action: "handle404")
            return
        }
        if(event.eventSessions?.size() > 0) {
            List<EventSession> sessions = eventService.getUpcomingSessions(event)
            forward(controller: "event", action: "sessionDetails", params: [eventId: event.id, sessionId: sessions.size() == 0 ? 0 : sessions[0].id])
        } else {
            String view = "/site/siteAutoPage";
            Map model = [name: DomainConstants.AUTO_GENERATED_PAGES.EVENT_DETAILS, view: "/plugins/event_management/site/eventDetails.gsp", event: event, metaTags: event.metaTags, title: event.title, macros: [EVENT_NAME: event.name], disableGooglePageTracking: event.disableGooglePageTracking];
            view = HookManager.hook("auto-page-view-model", view, model);
            render (view: view, model: model)
        }
    }

    @AutoGeneratedPage("event")
    def sessionDetails() {
        Long eventId = params.eventId.toLong(0)
        Long sessionId = params.sessionId.toLong(0)
        String view = "/site/siteAutoPage";
        Map model;
        if(eventId == 0 || sessionId == 0) {
            model = [name: DomainConstants.AUTO_GENERATED_PAGES.EVENT_DETAILS, view: "/plugins/event_management/site/sessionDetails.gsp",
                     macros: [EVENT_NAME: g.message(code: "no.event.session.found")], eventSession: null];
            view = HookManager.hook("auto-page-view-model", view, model);
            render (view: view, model: model)
        } else {
            Event event = Event.findById(eventId)
            EventSession eventSession = EventSession.findById(sessionId)
            if (!event || !eventSession) {
                response.setStatus(404)
                forward(controller: "exception", action: "handle404")
                return
            }
            if(event.id == eventSession.event.id) {
                model = [name: DomainConstants.AUTO_GENERATED_PAGES.EVENT_DETAILS, view: "/plugins/event_management/site/sessionDetails.gsp", macros: [EVENT_NAME: eventSession.name], event: event, eventSession: eventSession, upcomingSessions: eventService.getUpcomingSessions(event), metaTags: event.metaTags, disableGooglePageTracking: event.disableGooglePageTracking];
                view = HookManager.hook("auto-page-view-model", view, model);
                render (view: view, model: model)
            }
        }
    }

    def sectionInfo() {
        Event event
        EventSession session
        if(params.session) {
            session = EventSession.get(params.session.toLong())
        } else {
            event = Event.get(params.event.toLong())
        }
        VenueLocationSection section = VenueLocationSection.get(params.section.toLong())
        def ticketPurchased = eventService.getNumberOfTicketPurchased(section, event, session)

        render(view: "/plugins/event_management/site/sectionInfo", model: [
            event: params.event.toLong(), section: section, showCart: params.showCart ?: false, spinMax: (section.rowCount * section.columnCount - ticketPurchased)
        ])
    }

    def checkAvailabilityOfSeat() {
        Boolean result = eventService.isTicketAvailable(params.int("seat"), params.long("event"), params.long("session"), params.long("section"))
        if(result) {
            render([status: "success"] as JSON)
        } else {
            render([status: "error"] as JSON)
        }
    }

    def sendPersonalizedProgram() {
        Long eventId = params.eventId.toLong(0)
        Event event = Event.get(eventId)
        Long customerId = AppUtil.session.customer
        Customer customer
        String email = ""
        String customerName = g.message(code: "customer")
        if(customerId > 0) {
            customer = Customer.get(customerId)
            email = customer.address.email
            customerName = customer.firstName + " " + customer.lastName
        } else if(params.email) {
            email = params.email
        }
        if(eventService.sendPersonalizedProgram(email, event, customerName)) {
            render([status: "success", message: g.message(code: "personalized.program.request.success", args: [event.name])] as JSON)
        } else {
            render([status: "error", message: g.message(code: "personalized.program.request.error")] as JSON)
        }
    }

    def seatMap() {
        VenueLocationSection section = params.section instanceof VenueLocationSection ? params.section : VenueLocationSection.get(params.section)
        Integer rowNumber = eventService.getStartRowNumber(section)
        Integer columnNumber = eventService.getStartColumnNumber(section)
        render view: "/plugins/event_management/site/seatView", model: [section: section, rowNumber: rowNumber, columnNumber: columnNumber]
    }
}