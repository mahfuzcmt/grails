package com.webcommander.plugin.simplified_event_management

import com.webcommander.AutoGeneratedPage
import com.webcommander.acl.Permission
import com.webcommander.acl.RolePermission
import com.webcommander.admin.MessageSource
import com.webcommander.admin.Role
import com.webcommander.common.ImageService
import com.webcommander.config.EmailTemplate
import com.webcommander.config.SiteConfig
import com.webcommander.constants.DomainConstants
import com.webcommander.constants.NamedConstants
import com.webcommander.design.Layout
import com.webcommander.design.WidgetService
import com.webcommander.events.AppEventManager
import com.webcommander.manager.HookManager
import com.webcommander.manager.PathManager
import com.webcommander.plugin.simplified_event_management.mixin_service.WidgetService as ECWS
import com.webcommander.plugin.simplified_event_management.model.CartSimplifiedEventTicket
import com.webcommander.tenant.TenantContext
import com.webcommander.util.AppUtil
import com.webcommander.util.PluginDestroyUtil
import com.webcommander.webcommerce.Order
import grails.util.Holders

class BootStrap {

    private final String SIMPLIFIED_EVENT = "simplifiedEvent"
    private final String SIMPLIFIED_EVENT_MANAGEMENT = "simplified_event_management"
    private final String SIMPLIFIED_EVENT_DETAILS = "simplified.event"

    List domain_constants = [
            [constant:"SITE_CONFIG_TYPES", key: "SIMPLIFIED_EVENT_WIDGET", value: "simplified_event_widget"],
            [constant:"WIDGET_TYPE", key: "SIMPLIFIED_EVENT", value: SIMPLIFIED_EVENT],
            [constant:"WIDGET_CONTENT_TYPE", key: "SIMPLIFIED_EVENT", value: "simplified_event"],
            [constant:"EMAIL_TYPE", key: "SIMPLIFIED_EVENT_MANAGEMENT", value: SIMPLIFIED_EVENT_MANAGEMENT],
            [constant:"AUTO_GENERATED_PAGES", key: "SIMPLIFIED_EVENT_DETAILS", value: SIMPLIFIED_EVENT_DETAILS]
    ]

    List named_constants = [
            [constant:"IMAGE_RESIZE_TYPE", key: "SIMPLIFIED_EVENT_IMAGE", value:"simplified_event-image"],
            [constant:"EMAIL_SETTING_MESSAGE_KEYS", key: SIMPLIFIED_EVENT_MANAGEMENT, value:"simplified.event.management"],
            [constant:"WIDGET_MESSAGE_KEYS", key: SIMPLIFIED_EVENT + ".title", value:"simplified.event.widget"],
            [constant:"WIDGET_MESSAGE_KEYS", key: SIMPLIFIED_EVENT + ".label", value:"simplified.event"],
            [constant:"CART_OBJECT_TYPES", key: "SIMPLIFIED_EVENT_TICKET", value:"simplified_event_ticket"]
    ]

    def event_setting_data = [
            'update_ticket_stock' : 'after_payment'
    ]
    Map siteMessages = [
            "book.now": "Book Now",
            "your.requested.event.date.expired": "Your requested event '{0}' is out of date.",
            "requested.quantity.ticket.not.available": "Your requested {0} tickets not available.",
            "you.can.buy.maximum.quantity.for.event" : "You can buy maximum {0} tickets for event."
    ]
    List permissions =  [
            ["edit", false], ["remove", false], ["create", false], ["view.list", false], ["edit.permission", false]
    ]

    def tenantInit = { tenant ->
        DomainConstants.addConstant(domain_constants)
        NamedConstants.addConstant(named_constants)
        if(SiteConfig.findAllByTypeAndConfigKey(DomainConstants.SITE_CONFIG_TYPES.E_COMMERCE, "update_ticket_stock").size() == 0) {
            event_setting_data.each { entry ->
                new SiteConfig(type: "e_commerce", configKey: entry.key, value: entry.value).save();
            }
        }
        if(!AutoGeneratedPage.findByName(DomainConstants.AUTO_GENERATED_PAGES.SIMPLIFIED_EVENT_DETAILS)) {
            new AutoGeneratedPage(name: DomainConstants.AUTO_GENERATED_PAGES.SIMPLIFIED_EVENT_DETAILS, title: "Event Details - %SIMPLIFIED_EVENT_NAME%", layout: Layout.first()).save()
        }

        if(!EmailTemplate.findAllByType(DomainConstants.EMAIL_TYPE.SIMPLIFIED_EVENT_MANAGEMENT).size()) {
            def templates = [
                    [label: "new.purchase.ticket", identifier: "new-purchase-ticket-simplified-event", subject: "Your ticket(s) for %event_name%", isActiveReadonly: true, type: DomainConstants.EMAIL_TYPE.SIMPLIFIED_EVENT_MANAGEMENT],
                    [label: "personalized.program", identifier: "personalized-program-for-simplified-event", subject: "Personalized Program for %event_name%", isActiveReadonly: true, type: DomainConstants.EMAIL_TYPE.SIMPLIFIED_EVENT_MANAGEMENT, contentType: DomainConstants.EMAIL_CONTENT_TYPE.TEXT_HTML]
            ]
            templates.each {
                new EmailTemplate(it).save()
            }
        }
        siteMessages.each {
            if (!MessageSource.findByMessageKeyAndLocale(it.key, 'all')) {
                new MessageSource(messageKey: it.key, message: it.value, locale: "all").save();
            }
        }
        if(!Permission.findByType("simplified_event")) {
            Role role = Role.findByName("Admin")
            permissions.each { entry ->
                Permission permission =  new Permission(name: entry[0], label: entry[0], applicableOnEntity: entry[1], type: "simplified_event").save()
                new RolePermission(role: role, permission: permission, isAllowed: true).save()
            }
        }
        AppUtil.initializeDefaultImages(['simplified-event'])
    }

    def tenantDestroy = { tenant ->
        PluginDestroyUtil util = new PluginDestroyUtil()
        try {
            util.removePermission("simplified_event")
            siteMessages.each {
                util.removeSiteMessage(it.key)
            }
            util.removeEmailTemplates(*templates.identifier)
            util.removeAutoPage(SIMPLIFIED_EVENT_DETAILS)
            util.removeSiteConfig("e_commerce")
            NamedConstants.removeConstant(named_constants)
            DomainConstants.removeConstant(domain_constants)
        } catch(Exception e) {
            log.error "Could Not Deactivate Plugin simplified-event-management From Tenant $tenant", e
            throw e
        } finally {
            util.closeConnection()
        }
    }

    def init = { servletContext ->
        Holders.grailsApplication.mainContext.getBean(WidgetService).metaClass.mixin ECWS
        ImageService.RESIZABLE_IMAGE_SIZES.put("simplified_event-image", [
                100: [100, 100],
                300: [300,300]
        ])
        HookManager.register(SIMPLIFIED_EVENT_DETAILS + "-breadcrumb") { response ->
            response.currentItem = AppUtil.request.macros.SIMPLIFIED_EVENT_NAME
            return response
        }
        
        TenantContext.eachParallelWithWait(tenantInit)
        
        AppEventManager.on("order-confirm", { cart ->
            def session = AppUtil.session
            Order order = Order.proxy(cart.orderId)
            for(int i = 0; i < cart.cartItemList.size(); i++) {
                if(cart.cartItemList[i].object instanceof CartSimplifiedEventTicket) {
                    def id = cart.cartItemList[i].object.id;
                    int quantity = cart.cartItemList[i].quantity;
                    SimplifiedEvent event = SimplifiedEvent.proxy(id);
                    Map params = session[id.toString()];
                    for(int m = 1; m <= quantity; m++) {
                        params.remove("ticket"+m);
                    }
                    if(params) {
                        params.each { k, v ->
                            if(v instanceof Map) {
                                return;
                            }
                            String name = k.toString();
                            String ticket = name.substring(0, name.lastIndexOf('.'));
                            name = name.replace(ticket + ".", '');
                            new SimplifiedEventCustomFieldData(order: order, event: event, fieldName: name, fieldValue: v, ticket: ticket ).save();
                        }
                    }
                }
            }
        })
    }
}
