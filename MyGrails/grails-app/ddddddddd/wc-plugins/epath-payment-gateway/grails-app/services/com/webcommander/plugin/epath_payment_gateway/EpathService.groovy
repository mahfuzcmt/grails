package com.webcommander.plugin.epath_payment_gateway

import com.webcommander.ApplicationTagLib
import com.webcommander.AutoGeneratedPage
import com.webcommander.constants.DomainConstants
import com.webcommander.models.AddressData
import com.webcommander.models.Cart
import com.webcommander.models.PaymentInfo
import com.webcommander.throwables.ApplicationRuntimeException
import com.webcommander.util.AppUtil
import com.webcommander.webcommerce.Currency
import grails.gorm.transactions.Transactional
import grails.util.Holders

@Transactional
class EpathService {
    static ApplicationTagLib _app
    static getApp() {
        if(!_app) {
            return _app = Holders.grailsApplication.mainContext.getBean(ApplicationTagLib)
        }
        return _app
    }

    PaymentInfo resolveInfo(Map params) {
        PaymentInfo info = new PaymentInfo()
        String status = params.dte ? DomainConstants.PAYMENT_STATUS.SUCCESS : DomainConstants
                .PAYMENT_STATUS.FAILED
        info.amount = params.amt.toDouble()
        info.paymentRef = params["opt"].toLong()
        info.payerInfo = params.cname + " (" + params.ceml + ")"
        info.gatewayResponse = params.dte
        info.success = status == DomainConstants.PAYMENT_STATUS.SUCCESS
        info.trackInfo = params["ord"]
        return info
    }

    public def processEpathPayment(Map configMap, AddressData billingAddress, Cart cart) {
        Currency currency = AppUtil.baseCurrency
        if(currency.code != "AUD") {
            throw new ApplicationRuntimeException("could.not.contact.payment.provider.sorry.inconvenience")
        }
        AutoGeneratedPage page = AutoGeneratedPage.findByName(DomainConstants.AUTO_GENERATED_PAGES.PAYMENT_SUCCESS_PAGE);
        String successScheme = page.isHttps ? "https" : "http"

        Map models = [
            ord: "" + cart.orderId,
            des: "Payment for Order " + cart.orderId,
            amt: (cart.tagged.payable + cart.tagged.surcharge).toCurrency().toPrice(),
            cur: currency.code,
            frq: "Once Only",
            opt: "" + cart.tagged.payment.id,
            ceml: billingAddress.email,
            ret: app.baseUrl(scheme: successScheme) + "epath/paymentReturn"
        ]
        return [models: models, requestUrl: configMap["paymentUrl"]]
    }
}
