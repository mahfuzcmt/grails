package com.webcommander.plugin.directone_payment_gateway

import com.webcommander.ApplicationTagLib
import com.webcommander.AutoGeneratedPage
import com.webcommander.constants.DomainConstants
import com.webcommander.manager.CartManager
import com.webcommander.models.AddressData
import com.webcommander.models.CardInfo
import com.webcommander.models.Cart
import com.webcommander.models.PaymentInfo
import com.webcommander.throwables.ApplicationRuntimeException
import com.webcommander.util.AppUtil
import com.webcommander.util.HttpUtil
import com.webcommander.webcommerce.Currency
import com.webcommander.webcommerce.PaymentGatewayMeta
import grails.gorm.transactions.Transactional
import grails.util.Holders

@Transactional
class DirectOneService {
    static ApplicationTagLib _app
    static getApp() {
        if(!_app) {
            return _app = Holders.grailsApplication.mainContext.getBean(ApplicationTagLib)
        }
        return _app
    }

    PaymentInfo resolveInfo(Map params) {
        PaymentInfo info = new PaymentInfo()
        def session = AppUtil.session
        String status = (params.response_code == "00" || params.response_code == "08" || params.response_code == "11" || params.response_code == "16") ? DomainConstants.PAYMENT_STATUS.SUCCESS : DomainConstants
                .PAYMENT_STATUS.FAILED
        info.amount = params.payment_amount.toDouble()
        info.paymentRef = params.payment_id.toLong()
        info.payerInfo =  session.customer ? "Customer#" +  session.customer : "Guest Customer"
        info.gatewayResponse = params.response_text
        info.success = status == DomainConstants.PAYMENT_STATUS.SUCCESS
        info.trackInfo = params.bank_reference
        return info
    }

    public def hostedPayment(Map configMap, AddressData billingAddress, Cart cart) {
        boolean isLive
        if(configMap["mode"] == "live") {
            isLive = true
        }
        Currency currency = AppUtil.baseCurrency
        if(currency.code != "AUD") {
            throw new ApplicationRuntimeException("could.not.contact.payment.provider.sorry.inconvenience")
        }
        AutoGeneratedPage page = AutoGeneratedPage.findByName(DomainConstants.AUTO_GENERATED_PAGES.PAYMENT_SUCCESS_PAGE);
        String successScheme = page.isHttps ? "https" : "http"
        String total = (cart.tagged.payable + cart.tagged.surcharge).toCurrency().toPrice()
        String reference = "" + cart.tagged.payment.id
        Map models = [
                vendor_name: configMap["merchantId"],
                currency: currency.symbol,
                Address: billingAddress.addressLine1,
                Country: billingAddress.countryName,
                State: billingAddress.stateName,
                Postcode: billingAddress.postCode,
                information_fields: "Address,Country,State,Postcode",
                payment_reference: reference,
                receipt_address: billingAddress.email,
                return_link_url: app.baseUrl(scheme: successScheme) + "directOne/paymentReturn?order_id=${cart.orderId}&payment_id=${reference}&payment_amount=&payment_number=&response_code=&response_text=&bank_reference=",
                reply_link_url: app.baseUrl(scheme: "https")  + "directOne/paymentNotify?payment_id=${reference}&payment_amount=&payment_number=&response_code=&response_text=&bank_reference=",
               "Order #${reference}": "1,"  + total
        ]
        String requestUrl = isLive ? "https://vault.safepay.com.au/cgi-bin/make_payment.pl" : "https://vault.safepay.com.au/cgi-bin/test_payment.pl"
        return [models: models, requestUrl: requestUrl]
    }

    PaymentInfo processApiPayment(CardInfo cardInfo, Double amount, Long orderId, Long paymentId) {
        def configs = PaymentGatewayMeta.findAllByFieldFor(DomainConstants.CARD_PAYMENT_PROCESSOR_CODE.DIRECTONE)
        Map configMap = [:]
        configs.each {
            configMap[it.name] = it.value
        }
        boolean isLive = false
        if(configMap["mode"] == "live") {
            isLive = true
        }

        String url = isLive ? "https://vault.safepay.com.au/cgi-bin/direct_process.pl" : "https://vault.safepay.com.au/cgi-bin/direct_test.pl"

        Map  model = [
                vendor_name: configMap["merchantId"],
                vendor_password: configMap["password"],
                card_holder: cardInfo.holderName,
                card_number: cardInfo.cardNumber,
                card_type: "AUTO",
                card_expiry:  cardInfo.expiryMonth + cardInfo.expiryYear,
                card_cvv: cardInfo.cvv,
                payment_amount: "" + Math.round(total * 100),
                payment_reference: paymentId
        ]
        String truncatedCardNo =  cardInfo.cardNumber.substring(0, 4) + "...." + cardInfo.cardNumber.substring (cardInfo.cardNumber.length() - 4)
        Map loggerConf = [
            loggerName: "DirectOneLogger",
            replaces: [(cardInfo.cardNumber):  truncatedCardNo]
        ]
        String response = HttpUtil.doPostRequest(url, AppUtil.getQueryStringFromMap(model), [:], true, loggerConf)
        Properties properties = new Properties()
        properties.load(new StringReader(response))
        String status = (properties.summary_code == "0") ? DomainConstants.PAYMENT_STATUS.SUCCESS : DomainConstants.PAYMENT_STATUS.FAILED
        PaymentInfo info = new PaymentInfo()
        info.amount = amount
        info.trackInfo = properties.bank_reference
        info.gatewayResponse = properties.response_text
        info.success = status == DomainConstants.PAYMENT_STATUS.SUCCESS
        info.payerInfo = AppUtil.loggedCustomer ? "Customer#" +  AppUtil.loggedCustomer : "Guest Customer" + " (" + truncatedCardNo + ")"
        info.paymentRef = properties.payment_reference.toLong()
        return info
    }

    PaymentInfo processApiPayment(Map params) {
        def session = AppUtil.session
        Cart cart = CartManager.getCart(session.id, true)
        def total = (cart.tagged.payable + cart.tagged.surcharge)
        CardInfo cardInfo = new CardInfo(params["cardHolder"], params["cardNumber"], params["cvv"], params["cardExpiryMonth"], params["cardExpiryYear"])
        return processApiPayment(cardInfo, total, cart.orderId, cart.tagged["payment"].id)
    }
}
