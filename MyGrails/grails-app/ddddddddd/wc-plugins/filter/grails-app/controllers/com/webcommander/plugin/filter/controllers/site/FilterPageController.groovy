package com.webcommander.plugin.filter.controllers.site

import com.webcommander.authentication.annotations.AutoGeneratedPage
import com.webcommander.constants.DomainConstants
import com.webcommander.constants.NamedConstants
import com.webcommander.manager.HookManager
import com.webcommander.plugin.filter.FilterGroupItem
import com.webcommander.plugin.filter.FilterGroupProductAssoc
import com.webcommander.util.AppUtil
import com.webcommander.util.SortAndSearchUtil
import com.webcommander.webcommerce.Product
import com.webcommander.webcommerce.ProductService
import org.hibernate.sql.JoinType
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Qualifier

class FilterPageController {

    @Autowired
    @Qualifier("com.webcommander.ApplicationTagLib")
    com.webcommander.ApplicationTagLib app

    ProductService productService

    @AutoGeneratedPage("filter")
    def searchProduct() {
        def config = AppUtil.getConfig(DomainConstants.SITE_CONFIG_TYPES.FILTER_PAGE)

        Long categoryId = params["categoryId"] ? params["categoryId"] as Long : null

        List fgi = params.list("filter-group-item")
        List<Long> groupItems = []
        if (fgi) {
            fgi.each {
                if (it) {
                    groupItems.add(Long.parseLong(it))
                }
            }
        }

        Map filterMap = params.clone()
        filterMap = filterMap.findAll {!it.key.contains(".")}

        config["max"] = -1
        config["offset"] = 0
        if (config["show-pagination"] != "none" && config['display-type'] != NamedConstants.PRODUCT_WIDGET_VIEW.SCROLLABLE) {
            config["offset"] = params.int("bdpr-offset") ?: 0
            config["max"] = config["item-per-page"].toInteger(0) ?: -1
        }
        config = HookManager.hook("productViewFilterWithRequestContributionInBrandPage", config)

        filterMap.remove("action")
        filterMap.remove("controller")
        filterMap.remove("categoryId")

        filterMap.remove("bdpr-sort")
        filterMap.remove("bdpr-offset")
        filterMap.remove("bdpr-max")

        Closure filterCriteria = {

            String prodAlias = ""
            if (groupItems) {
                createAlias("product", "p")
                createAlias("item", "fgpa")
                prodAlias = "p."
                inList("fgpa.id", groupItems)
            }

            filterMap.each { filter ->
                if(filter.key.equals("priceRange")) {
                    Double max = filterMap.priceRange?.maxRange ? filterMap.priceRange.maxRange.toDouble() : 0.0
                    Double min = filterMap.priceRange?.minRange ? filterMap.priceRange.minRange.toDouble() : 0.0
                    or {
                        and {
                            eq(prodAlias+'isOnSale', false)
                            ge(prodAlias+"basePrice", min)
                            if(max >= min && max > 0.0) {
                                le(prodAlias+"basePrice", max)
                            }
                        }
                        and {
                            eq(prodAlias+'isOnSale', true)
                            ge(prodAlias+"salePrice", min)
                            if(max >= min && max > 0.0) {
                                le(prodAlias+"salePrice", max)
                            }
                        }
                    }
                }
                else {
                    if (filter.value.toString().matches("true|false|on|off")) {
                        filter.value = filter.value.toBoolean()
                    }
                    if(filter.value != false && filter.value != "none") {
                        if ( Product.metaClass.properties.find{it.name == filter.key} ) {
                            eq(prodAlias+filter.key, filter.value)
                        }
                    }
                }
            }

            eq(prodAlias+"isInTrash", false)

            if (categoryId) {
                createAlias(prodAlias+"parents", "pts", JoinType.LEFT_OUTER_JOIN)
                eq('pts.id', categoryId)
            }

        }

        Integer totalCount = 0
        List<Product> products = []

        if (groupItems) {
            totalCount = FilterGroupProductAssoc.createCriteria().count() {
                criteria filterCriteria
            }
            List<FilterGroupProductAssoc> assocList = FilterGroupProductAssoc.createCriteria().list(config) {
                criteria filterCriteria
            }
            products = assocList.product
        } else {
            totalCount = Product.createCriteria().count() {
                criteria filterCriteria
            }
            products = Product.createCriteria().list(config) {
                criteria filterCriteria
            }
        }

        config["product-sorting"] = filterMap["product-sorting"] = params["bdpr-sort"]

        def productIds = products.id

        def productList = productService.getProductData(productIds, filterMap, false)
        if (!filterMap["product-sorting"] && config["max"] == -1) {
            productList = SortAndSearchUtil.sortInCustomOrder(productList, "id", productIds)
        }

        String view = "/site/siteAutoPage";
        Map model = [
                name            : DomainConstants.AUTO_GENERATED_PAGES.FILTER_DETAIL_PAGE,
                productList     : productList,
                config          : config,
                selected        : "Search Result",
                macros          : [FILTER_NAME: "Filter"],
                max             : config["max"],
                offset          : config["offset"],
                totalCount      : totalCount,
                view            : "/plugins/filter/site/filterPage.gsp"
        ];
        view = HookManager.hook("auto-page-view-model", view, model);
        render (view: view, model: model)

    }

    @AutoGeneratedPage("filter.group.item")
    def filterGroupItem() {
        Map config = AppUtil.getConfig(DomainConstants.SITE_CONFIG_TYPES.FILTER_GROUP_PAGE)
        FilterGroupItem groupItem = FilterGroupItem.where { eq("url", params.url) }.get()
        if (!groupItem) {
            response.setStatus(404)
            forward(controller: "exception", action: "handle404")
            return
        }

        Closure filterCriteria = {

            String prodAlias = ""

            createAlias("product", "p")
            createAlias("item", "fgpa")
            prodAlias = "p."

            eq(prodAlias+"isInTrash", false)

            eq('fgpa.id', groupItem.id)

        }

        List<FilterGroupProductAssoc> assocList = FilterGroupProductAssoc.createCriteria().list() {
            criteria filterCriteria
        }
        def productIds = assocList.product.id

        Map filterMap = [:]
        config["product-sorting"] = filterMap["product-sorting"] = params["bdpr-sort"]
        config["max"] = -1
        config["offset"] = 0
        if (config["show-pagination"] != "none" && config['display-type'] != NamedConstants.PRODUCT_WIDGET_VIEW.SCROLLABLE) {
            config["offset"] = params.int("bdpr-offset") ?: 0
            config["max"] = params.int("bdpr-max") ?: (config["item-per-page"].toInteger(0) ?: -1)
        }
        config["product_listing_id"] = "band-product-listing"
        config = HookManager.hook("productViewFilterWithRequestContributionInBrandPage", config)
        Integer totalCount = productService.filterOutAvailableProductCount(productIds, filterMap)
        boolean filtered = false;
        if (config["max"] != -1 && !filterMap["product-sorting"]) {
            def filteredIds = productService.filterAvailableProducts(productIds, filterMap)
            filtered = true;
            productIds = filteredIds.subList(config["offset"], (config["offset"] + config["max"]) > filteredIds.size() ? filteredIds.size() : (config["offset"] + config["max"]))
        }
        if (config["max"] != -1 && filterMap["product-sorting"]) {
            filterMap["max"] = config["max"];
            filterMap["offset"] = config["offset"];
        }

        def productList = productService.getProductData(productIds, filterMap, filtered)
        if (!filterMap["product-sorting"] && config["max"] == -1) {
            productList = SortAndSearchUtil.sortInCustomOrder(productList, "id", productIds)
        }

        String description = groupItem.shortDescription
        if (description && groupItem.detailDescription && !params.rm) {
            description += '<span class="read-more"><a href="'+app.relativeBaseUrl()+'filter/'+groupItem.url+'?rm=Y">' + g.message(code: "read.more") + '</a></span>'
        } else if (params.rm || (!description && groupItem.detailDescription)) {
            description = groupItem.detailDescription
        }

        String view = "/site/siteAutoPage";
        Map model = [
                name       : DomainConstants.AUTO_GENERATED_PAGES.FILTER_GROUP_ITEM_PAGE,
                productList: productList,
                config     : config, max: config["max"],
                offset     : config["offset"],
                totalCount : totalCount,
                selected   : params.url,
                groupItem  : groupItem,
                description: description,
                macros     : [FILTER_GROUP_ITEM_NAME: groupItem.title],
                view       : "/plugins/filter/site/filterGroupItemDetails.gsp"
        ];
        view = HookManager.hook("auto-page-view-model", view, model);
        render(view: view, model: model)
    }
}
