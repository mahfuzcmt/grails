package com.webcommander.plugin.filter

import com.webcommander.AppResourceTagLib
import com.webcommander.AutoGeneratedPage
import com.webcommander.admin.ConfigService
import com.webcommander.admin.MessageSource
import com.webcommander.common.ImageService
import com.webcommander.config.SiteConfig
import com.webcommander.constants.DomainConstants
import com.webcommander.constants.NamedConstants
import com.webcommander.design.Layout
import com.webcommander.design.ProductWidgetService
import com.webcommander.design.WidgetService
import com.webcommander.manager.HookManager
import com.webcommander.manager.LicenseManager
import com.webcommander.plugin.filter.mixin_service.ProductWidgetService as PWS
import com.webcommander.plugin.filter.mixin_service.WidgetService as ECWS
import com.webcommander.tenant.TenantContext
import com.webcommander.util.AppUtil
import com.webcommander.util.PluginDestroyUtil
import grails.util.Holders

class BootStrap {

    private final String FILTER = "filter"
    private final String FILTER_GROUP = "filterGroup"
    private final String SHOP_BY_FILTER_GROUP = "shopByFilterGroup"

    List domain_constants = [
            [constant: "SITE_CONFIG_TYPES", key: "FILTER", value: FILTER],
            [constant: "WIDGET_TYPE", key: "FILTER", value: FILTER],
            [constant: "PRODUCT_WIDGET_TYPE", key: "FILTER_GROUP", value: FILTER_GROUP],
            [constant: "SITE_CONFIG_TYPES", key: "FILTER_PAGE", value: "filter_page"],
            [constant: "SITE_CONFIG_TYPES", key: "FILTER_GROUP_PAGE", value: "filter_group_page"],
            [constant: "AUTO_GENERATED_PAGES", key: "FILTER_PAGE", value: "filter"],
            [constant: "AUTO_GENERATED_PAGES", key: "FILTER_GROUP_ITEM_PAGE", value: "filter.group.item"],
            [constant: "DEFAULT_IMAGES", key: "filter", value: "filter-image"],

            [constant: "SITE_CONFIG_TYPES", key: "SHOP_BY_FILTER_GROUP", value: SHOP_BY_FILTER_GROUP],
            [constant: "WIDGET_TYPE", key: "SHOP_BY_FILTER_GROUP", value: SHOP_BY_FILTER_GROUP]

    ]

    List named_constants = [
            [constant: "WIDGET_MESSAGE_KEYS", key: FILTER + ".title", value: FILTER],
            [constant: "WIDGET_MESSAGE_KEYS", key: FILTER + ".label", value: FILTER],
            [constant: "WIDGET_LICENSE", key: FILTER, value: "allow_filter_feature"],

            [constant: "IMAGE_RESIZE_TYPE", key: "FILTER_IMAGE", value: "filter-image"],
            [constant: "IMAGE_RESIZE_TYPE", key: "FILTER_GROUP_ITEM", value: "filter-group-item"],

            [constant: "PRODUCT_WIDGET_MESSAGE_KEYS", key: FILTER_GROUP + ".title", value: "filter.group.widget"],
            [constant: "PRODUCT_WIDGET_MESSAGE_KEYS", key: FILTER_GROUP + ".label", value: "filter.group"],
            [constant: "WIDGET_LICENSE", key: FILTER_GROUP, value: "allow_filter_feature"],

            [constant: "WIDGET_MESSAGE_KEYS", key: SHOP_BY_FILTER_GROUP + ".title", value: "shop.by.filter.group.widget"],
            [constant: "WIDGET_MESSAGE_KEYS", key: SHOP_BY_FILTER_GROUP + ".label", value: "shop.by.filter.group"],
            [constant: "WIDGET_LICENSE", key: FILTER, value: "allow_filter_feature"],
    ]

    def filter_page_data = [
            "display-type"           : "scrollable",
            "show-pagination"        : "none",
            "item-per-page"          : "10",
            "price"                  : "true",
            "description"            : "true",
            "add_to_cart"            : "true",
            "item-per-page-selection": "false",
            "sortable"               : "false",
            "is_rating_active"       : "false"
    ]

    def filter_group_page_data = [
            "thumbnail_width"              : "150",
            "thumbnail_height"             : "60",
            "display-type"                 : "scrollable",
            "show-pagination"              : "none",
            "item-per-page"                : "10",
            "price"                        : "true",
            "description"                  : "true",
            "add_to_cart"                  : "true",
            'show_view_switcher'           : "true",
            "show_on_hover"                : "false",
            "show_image"                   : "true",
            "show_description"             : "true",
            "item-per-page-selection"      : "false",
            "sortable"                     : "false",
            "expect_to_pay_price"          : "false",
            "expect_to_pay_price_with_tax" : "false",
            "label_for_price"              : "s:today",
            "label_for_expect_to_pay"      : "s:expect.to.pay",
            "strike_through_previous_price": "true",
            "label_for_call_for_price"     : "s:call.for.price"
    ]

    def tenantInit = { tenant ->
        DomainConstants.addConstant(domain_constants)
        NamedConstants.addConstant(named_constants)
        ConfigService.addTab(FILTER, [
                url        : "filterAdmin/loadFilterSetting",
                message_key: "filter.page"
        ])

        if (!AutoGeneratedPage.findByName("filter")) {
            new AutoGeneratedPage(name: 'filter', title: "Search Result(s)", layout: Layout.first()).save()
        }

        if (SiteConfig.findAllByType("filter_page").size() == 0) {
            filter_page_data.each { entry ->
                new SiteConfig(type: "filter_page", configKey: entry.key, value: entry.value).save()
            }
        }
        if (!MessageSource.findByMessageKeyAndLocale("minimum.price", "all")) {
            new MessageSource(messageKey: "minimum.price", message: "Minimum Price", locale: "all").save()
        }
        if (!MessageSource.findByMessageKeyAndLocale("maximum.price", "all")) {
            new MessageSource(messageKey: "maximum.price", message: "Maximum Price", locale: "all").save()
        }
        AppUtil.initializeDefaultImages(['filter'])

        Layout layout = Layout.first()
        if (!AutoGeneratedPage.findByName(DomainConstants.AUTO_GENERATED_PAGES.FILTER_GROUP_ITEM_PAGE)) {
            new AutoGeneratedPage(name: DomainConstants.AUTO_GENERATED_PAGES.FILTER_GROUP_ITEM_PAGE, title: "Filter Details - %FILTER_GROUP_ITEM_NAME%", layout: layout, editorEnable: false).save()
        }
        ConfigService.addTab(FILTER_GROUP, [
                url        : "filterGroup/loadFilterGroupSetting",
                message_key: "filter.group.page"
        ])
        if (SiteConfig.findAllByType("filter_group_page").size() == 0) {
            filter_group_page_data.each { entry ->
                new SiteConfig(type: "filter_group_page", configKey: entry.key, value: entry.value).save()
            }
        }

    }

    def destroy = {
    }

    def tenantDestroy = { tenant ->

        PluginDestroyUtil util = new PluginDestroyUtil()
        try {

            ConfigService.removeTab(FILTER)
            util.removeAutoGeneratePageWidget(NamedConstants.AUTO_GENERATED_PAGE_WIDGET.PRODUCT_WIDGET, FILTER_GROUP)
            util.removeAutoPage(FILTER)
            util.removeSiteConfig("filter_page")
            util.removeSiteMessage("minimum.price", "maximum.price")
            util.removeWidget(FILTER)

            ConfigService.removeTab(FILTER_GROUP)
            util.removeAutoPage(DomainConstants.AUTO_GENERATED_PAGES.FILTER_GROUP_ITEM_PAGE)
            util.removeSiteConfig("filter_group_page")
            util.removeProductWidget(FILTER_GROUP)
            util.removeSiteConfig(SHOP_BY_FILTER_GROUP)
            util.removeWidget(SHOP_BY_FILTER_GROUP)

            NamedConstants.removeConstant(named_constants)
            DomainConstants.removeConstant(domain_constants)

        } catch (Exception e) {
            log.error "Could Not Deactivate Plugin filter From Tenant $tenant", e
            throw e
        } finally {
            util.closeConnection()
        }
    }

    def init = { servletContext ->
        Holders.grailsApplication.mainContext.getBean(WidgetService).metaClass.mixin ECWS
        Holders.grailsApplication.mainContext.getBean(ProductWidgetService).metaClass.mixin PWS
        Holders.grailsApplication.mainContext.getBean(AppResourceTagLib).metaClass.mixin FilterResourceTagLib
        ImageService.RESIZABLE_IMAGE_SIZES.put("filter-image", [
                "thumb": [150, 60]
        ])

        ImageService.RESIZABLE_IMAGE_SIZES.put("filter-group-item", [
                "thumb": [150, 60],
                200    : [200, 200],
                300    : [300, 300],
                400    : [400, 400]
        ])

        TenantContext.eachParallelWithWait(tenantInit)

        HookManager.register("available-widgets") { widgets ->
            if (LicenseManager.isProvisionActive() && !LicenseManager.license("allow_filter_feature")) {
                def modified = new ArrayList<String>(widgets)
                modified.removeAll { it == "filter" }
                modified.removeAll { it == "filterGroup" }
                modified.removeAll { it == "shopByFilterGroup" }
                modified
            }
        }
    }
}
