package com.webcommander.plugin.blog

import com.webcommander.AppResourceTagLib
import com.webcommander.AutoGeneratedPage
import com.webcommander.acl.Permission
import com.webcommander.acl.RolePermission
import com.webcommander.admin.ConfigService
import com.webcommander.admin.DisposableUtilService
import com.webcommander.admin.Role
import com.webcommander.admin.TrashService
import com.webcommander.common.ImageService
import com.webcommander.config.EmailTemplate
import com.webcommander.config.SiteConfig
import com.webcommander.constants.DomainConstants
import com.webcommander.constants.NamedConstants
import com.webcommander.content.AlbumService
import com.webcommander.content.NavigationService
import com.webcommander.controllers.admin.design.GalleryWidgetController
import com.webcommander.design.FrontEndEditorService
import com.webcommander.design.GalleryWidgetService
import com.webcommander.design.Layout
import com.webcommander.design.WidgetService
import com.webcommander.events.AppEventManager
import com.webcommander.installation.template.TemplateContent
import com.webcommander.installation.template.TemplateDataProviderService
import com.webcommander.installation.template.TemplateInstallationService
import com.webcommander.manager.CacheManager
import com.webcommander.manager.HookManager
import com.webcommander.manager.LicenseManager
import com.webcommander.models.TemplateData
import com.webcommander.plugin.blog.app.BlogResourceTagLib
import com.webcommander.plugin.blog.content.BlogService
import com.webcommander.plugin.blog.util.ConfigUtil
import com.webcommander.tenant.TenantContext
import com.webcommander.util.AppUtil
import com.webcommander.util.PluginDestroyUtil
import com.webcommander.widget.Widget
import com.webcommander.widget.WidgetContent
import grails.util.Holders
import grails.web.servlet.mvc.GrailsParameterMap

class BootStrap {

    private final String BLOG = "blog"
    private final String BLOG_CATEGORY = "blogCategory"
    private final String BLOG_SERVICE = "blogService"

    Map blog_setting_data = [
            'moderator_email'            : '',
            'post_author'                : 'true',
            'post_date'                  : 'true',
            'post_categories'            : 'true',
            'facebook'                   : 'true',
            'twitter'                    : 'true',
            'google'                     : 'true',
            'linkedIn'                   : 'true',
            'send_friend'                : 'true',
            'comment_restriction'        : 'A',
            'comment_moderator_approval' : 'true',
            'comment_per_page'           : '20',
            'comment_email'              : 'true',
            'comment_name'               : 'true',
            'black_list_no'              : '2',
            'black_list'                 : '',
            'captcha'                    : 'true',
            'listview_width'             : '200',
            'listview_height'            : '250',
            'cat_details_width'          : '290',
            'cat_details_height'         : '385',
            'cat_post_content'           : 'S',
            'cat_post_content_length'    : '160',
            'cat_post_read_more'         : 's:read.more',
            'cat_image'                  : 'true',
            'cat_description'            : 'true',
            'cat_post_image'             : 'true',
            'cat_post_author'            : 'true',
            'cat_post_date'              : 'true',
            'cat_post_categories'        : 'true',
            'cat_post_comment_count'     : 'true'
    ]

    List domain_constants = [
            [constant:"SITE_CONFIG_TYPES", key: "BLOG", value: BLOG],
            [constant:"WIDGET_CONTENT_TYPE", key: "BLOG_CATEGORY", value: BLOG_CATEGORY],
            [constant:"WIDGET_CONTENT_TYPE", key: "BLOG_POST", value: "blogPost"],
            [constant:"WIDGET_TYPE", key: "BLOG_POST", value: "blogPost"],
            [constant:"AUTO_GENERATED_PAGES", key: "BLOG_POST_DETAILS_PAGE", value: "blog.post"],
            [constant:"AUTO_GENERATED_PAGES", key: "BLOG_CATEGORY_DETAILS_PAGE", value: "blog.category"],
            [constant:"NAVIGATION_ITEM_TYPE", key: "BLOG_CATEGORY", value: BLOG_CATEGORY],
            [constant:"EMAIL_TYPE", key: "BLOG", value: BLOG],
            [constant:"GALLERY_CONTENT_TYPES", key: "BLOG_POST", value: "blogPost"]
    ]

    List named_constants = [
            [constant:"EMAIL_SETTING_MESSAGE_KEYS", key: "blog", value:"blog.emails"],
            [constant:"WIDGET_MESSAGE_KEYS", key: "blogPost.title", value:"blog.post.widget"],
            [constant:"WIDGET_MESSAGE_KEYS", key: "blogPost.label", value:"blog.post"],
            [constant:"WIDGET_LICENSE", key: "blogPost", value: "allow_blog_feature"],
            [constant:"NAVIGATION_ITEM_MESSAGE_KEYS", key: "blogCategory", value: "blog.category"],
            [constant:"GALLERY_CONTENT_TYPES", key: "blogPost", value: "blog.post"],
            [constant:"SERVICE_NAME", key: "BLOG_SERVICE", value: BLOG_SERVICE]
    ]

    List navigation_service_constants_map = [
            [ constant: "domains", key: BLOG_CATEGORY, value: BLOG_SERVICE],
            [ constant: "auto_population_item_type", key: BLOG_CATEGORY]
    ]

    List album_service_constants_map = [
            [ constant: "domains", key: BLOG_CATEGORY, value: BLOG_SERVICE]

    ]

    List trash_service_constants_map = [
            [ constant: "domains", key: "BlogPost", value: BLOG_SERVICE]
    ]

    List templates = [
            [label: "new.comment", identifier: "new-blog-comment", active: true, subject: "Someone has commented on the Blog post", type: BLOG],
            [label: "comment.approval", identifier: "blog-comment-approved", subject: "A comment has been approved", active: true, type: BLOG]
    ]

    List permissions =  [
            ["edit", true], ["remove", true], ["create", false], ["view.list", false], ["edit.permission", false]
    ]

    def tenantInit = { tenant ->

        DomainConstants.addConstant(domain_constants)
        NamedConstants.addConstant(named_constants)

        NavigationService.addConstant(navigation_service_constants_map)
        AlbumService.addConstant(album_service_constants_map)
        TrashService.addConstant(trash_service_constants_map)

        ConfigService.addTab(BLOG, [
                url: "blogAdmin/loadBlogSettingView",
                message_key: "blog",
                license: "allow_blog_feature"
        ])
        if(SiteConfig.findAllByType(BLOG).size() == 0) {
            blog_setting_data.each { entry ->
                new SiteConfig(type: BLOG, configKey: entry.key, value: entry.value).save()
            }
            AppUtil.clearConfig(BLOG)
        }
        if(!AutoGeneratedPage.findByName("blog.post")) {
            new AutoGeneratedPage(name: "blog.post", title: "%POST%", layout: Layout.first()).save()
            new AutoGeneratedPage(name: "blog.category", title: "Blog Category Details Page - %CATEGORY%", layout: Layout.first()).save()
        }
        if (!EmailTemplate.findByType(BLOG)) {
            templates.each {
                new EmailTemplate(it).save()
            }
        }
        if(!Permission.findByType(BLOG)) {
            Role role = Role.findByName("Admin")
            permissions.each { entry ->
                Permission permission = new Permission(name: entry[0], label: entry[0], applicableOnEntity: entry[1], type: BLOG).save()
                new RolePermission(role: role, permission: permission, isAllowed: true).save()
            }
            CacheManager.removeCache(NamedConstants.CACHE.SCOPE_APP, NamedConstants.CACHE.ACCESS_CONTROL)
        }
    }

    def init = { servletContext ->
        BlogService blogService = Holders.grailsApplication.mainContext.getBean(BlogService)
        DisposableUtilService disposableUtilService = Holders.grailsApplication.mainContext.getBean(DisposableUtilService)

        Holders.grailsApplication.mainContext.getBean(AppResourceTagLib).metaClass.mixin BlogResourceTagLib
        Holders.grailsApplication.mainContext.getBean(WidgetService).metaClass.mixin com.webcommander.plugin.blog.mixin_service.WidgetService
        Holders.grailsApplication.mainContext.getBean(TemplateDataProviderService).metaClass.mixin com.webcommander.plugin.blog.mixin_service.TemplateDataProviderService
        Holders.grailsApplication.mainContext.getBean(TemplateInstallationService).metaClass.mixin com.webcommander.plugin.blog.mixin_service.TemplateInstallationService
        Holders.grailsApplication.mainContext.getBean(GalleryWidgetService).metaClass.mixin com.webcommander.plugin.blog.mixin_service.GalleryWidgetService
        Holders.grailsApplication.mainContext.getBean(FrontEndEditorService).metaClass.mixin com.webcommander.plugin.blog.mixin_service.FrontEndEditorService
        Holders.grailsApplication.mainContext.getBean(GalleryWidgetController).metaClass.mixin com.webcommander.plugin.blog.controllers.admin.design.GalleryWidgetController

        disposableUtilService.putDisposableUtilFactory("blogPost", blogService)
        disposableUtilService.putDisposableUtilFactory("blogCategory", blogService)

        ImageService.RESIZABLE_IMAGE_SIZES.put("blog-post-image", [
            150: [150, 150],
            450: [450, 450],
            600: [600, 600],
            900: [900, 900]
        ])
        ImageService.RESIZABLE_IMAGE_SIZES.put("blog-category-image", [
            450: [450, 450],
            600: [600, 600],
            900: [900, 900]
        ])

        TenantContext.eachParallelWithWait(tenantInit)

        AppEventManager.on(BLOG + "-refresh-site-config", ConfigUtil.&setPostImageConfig)
        HookManager.register("available-widgets") { widgets ->
            if(LicenseManager.isProvisionActive() && !LicenseManager.license("allow_blog_feature")) {
                def modified = new ArrayList<String>(widgets)
                modified.removeAll {it == "blogPost"}
                modified
            }
        }

        HookManager.register("before-save-gallery-widget", { Widget widget, GrailsParameterMap params ->
            if(params.galleryContentType == DomainConstants.GALLERY_CONTENT_TYPES.BLOG_POST) {
                params.list("post").each {
                    WidgetContent widgetContent = new WidgetContent(contentId: it)
                    widgetContent.widget = widget;
                    widgetContent.type = params.galleryContentType
                    widget.widgetContent.add(widgetContent)
                }
            }
            return widget
        });

        AppEventManager.on("blog-post-update", { id ->
            TemplateContent.where {
                contentType == DomainConstants.WIDGET_CONTENT_TYPE.BLOG_POST
                contentId == id
            }.deleteAll()
        });

        AppEventManager.on("blog-category-update", { id ->
            TemplateContent.where {
                contentType == BLOG_CATEGORY
                contentId == id
            }.deleteAll()
        });

        HookManager.register("provide-template-data", { TemplateData templateData ->
            blog_setting_data.each {
                if(it.key != "moderator_email") {
                    templateData.collectSiteConfig(BLOG, it.key)
                }
            }
            return templateData
        });

        HookManager.register("site-search-config", {Map siteSearchConfig, Map searchConfig ->
            siteSearchConfig.blog = [:]
            siteSearchConfig.blog.max = AppUtil.params.int("blog-search-max") ?: searchConfig.item_per_page.toInteger()
            siteSearchConfig.blog.offset = AppUtil.params.int("blog-search-offset") ?: 0
            return siteSearchConfig
        })

         HookManager.register("get-blog-posts-by-id", { List ids ->
          return blogService.filterOutAvailableBlogPost(ids, AppUtil.loggedCustomer, [:])
         })

        HookManager.register(DomainConstants.AUTO_GENERATED_PAGES.BLOG_CATEGORY_DETAILS_PAGE + "-breadcrumb") { response ->
            response.currentItem = AppUtil.request.macros.CATEGORY
            return response
        }

        HookManager.register(DomainConstants.AUTO_GENERATED_PAGES.BLOG_POST_DETAILS_PAGE + "-breadcrumb") { response ->
            response.currentItem = AppUtil.request.macros.POST
            return response
        }
    }

    def destroy = {
    }

    def tenantDestroy = { tenant ->
        ConfigService.removeTab(BLOG)
        PluginDestroyUtil util = new PluginDestroyUtil()
        try {
            util.removeSiteConfig(BLOG)
            util.removeAutoPage("blog.post", "blog.category")
            util.removeEmailTemplates(*templates.identifier)
            util.removePermission(BLOG)
            util.removeWidget("blogPost")
            TrashService.removeConstant(trash_service_constants_map)
            AlbumService.removeConstant(album_service_constants_map)
            NavigationService.removeConstant(navigation_service_constants_map)
            NamedConstants.removeConstant(named_constants)
            DomainConstants.removeConstant(domain_constants)
            BlogResourceTagLib.RESOURCES_PATH.each { resource ->
                util.deleteResourceFolders(resource.value)
            }
        } catch(Exception e) {
            log.error "Could Not Deactivate Plugin blog From Tenant $tenant", e
            throw e
        } finally {
            util.closeConnection()
        }
    }
}