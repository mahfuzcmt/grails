package com.webcommander.plugin.product_quick_view.controllers.site

import com.webcommander.AutoGeneratedPage
import com.webcommander.AutoPageContent
import com.webcommander.authentication.annotations.License
import com.webcommander.constants.DomainConstants
import com.webcommander.models.ProductData
import com.webcommander.util.AppUtil
import com.webcommander.webcommerce.Product
import com.webcommander.webcommerce.ProductService
import grails.converters.JSON

class QuickViewController {
    ProductService productService

    @License(required = "allow_product_quick_view_feature")
    def popup() {
        Boolean forAdmin = params.adminView.toBoolean(false) && session.admin
        Product product = productService.getProductIfAvailable(params.long("productId"), [forAdmin: forAdmin])
        if (!product) {
            render([status: "error", message: message(code: "selected.product.not.available")] as JSON)
            return
        }
        def config = AppUtil.getConfig(DomainConstants.SITE_CONFIG_TYPES.PRODUCT)
        if (!forAdmin && product.availableFor != DomainConstants.PRODUCT_AVAILABLE_FOR.EVERYONE) {
            if (session.customer) {
                if (product.availableFor != DomainConstants.PRODUCT_AVAILABLE_FOR.CUSTOMER) {
                    if (!product.availableToCustomers.id.contains(session.customer) &&!product.availableToCustomerGroups.customers.unique().id.contains(session.customer)) {
                        render([status: "error", message: message(code: "selected.product.not.available")] as JSON)
                        return
                    }
                }
            } else {
                render([status: "error", message: message(code: "selected.product.not.available")] as JSON)
                return
            }
        }
        ProductData productData = productService.getProductData(product, [:]);
        AutoGeneratedPage page = AutoGeneratedPage.findByName(DomainConstants.AUTO_GENERATED_PAGES.PRODUCT_PAGE)
        AutoPageContent pageContent = AutoPageContent.createCriteria().get {
            eq("belong.id", page.id)
        };
        String html = g.include(view: "/plugins/product_quick_view/site/quickViewPopUp.gsp", model: [productData: productData, product: product, config: config, pageContent: pageContent])
        render([status: "success", html: html] as JSON)
    }

    def quickSettingView() {
        def config = AppUtil.getConfig(DomainConstants.SITE_CONFIG_TYPES.PRODUCT_QUICK_VIEW)
        render (view: "/plugins/product_quick_view/admin/setting/quickViewSetting", model: [config: config])
    }

}
