package com.webcommander.plugin.wish_list

import com.webcommander.AutoGeneratedPage
import com.webcommander.admin.ConfigService
import com.webcommander.config.EmailTemplate
import com.webcommander.config.SiteConfig
import com.webcommander.constants.DomainConstants
import com.webcommander.constants.NamedConstants
import com.webcommander.design.Layout
import com.webcommander.manager.HookManager
import com.webcommander.tenant.TenantContext
import com.webcommander.util.AppUtil
import com.webcommander.util.PluginDestroyUtil
import com.webcommander.webcommerce.ProductService
import grails.util.Holders

class BootStrap {

    private final String WISH_LIST = "wish_list"
    private final String wish_list = "wishList"
    private final String WISH_LIST_LABEL = "wish_list_label"
    private final String WISH_LIST_DEFAULT_LABEL = "wish_list_default_label"
    private final String WISH_LIST_ACTIVE = "wish_list_active"
    private final String WISH_LIST_ORDER = "wish_list_order"

    ConfigService configService

    List site_config_constants = [
            [constant:DomainConstants.SITE_CONFIG_TYPES.MY_LISTS, key: WISH_LIST_LABEL, value:"Wish List"],
            [constant:DomainConstants.SITE_CONFIG_TYPES.MY_LISTS, key: WISH_LIST_DEFAULT_LABEL, value:"Wish List"],
            [constant:DomainConstants.SITE_CONFIG_TYPES.MY_LISTS, key: WISH_LIST_ACTIVE, value:"true"],
            [constant:DomainConstants.SITE_CONFIG_TYPES.MY_ACCOUNT_PAGE, key: WISH_LIST, value:"false"],
            [constant:WISH_LIST, key: "display-type", value:"scrollable"],
            [constant:WISH_LIST, key: "show-pagination", value:"none"],
            [constant:WISH_LIST, key: "item-per-page", value:"10"],
            [constant:WISH_LIST, key: "price", value:"true"],
            [constant:WISH_LIST, key: "description", value:"true"],
            [constant:WISH_LIST, key: "add_to_cart", value:"true"],
            [constant:WISH_LIST, key: "add_to_compare", value:"true"],
            [constant:WISH_LIST, key: "show_on_hover", value:"false"],
            [constant:WISH_LIST, key: "item-per-page-selection", value:"false"],
            [constant:WISH_LIST, key: "sortable", value:"false"],
            [constant:WISH_LIST, key: "show_view_switcher", value:"true"],
            [constant:WISH_LIST, key: "label_for_call_for_price", value:"s:call.for.price"]
    ]

    List domain_constants = [
            [constant:"AUTO_GENERATED_PAGES", key: "WISH_LIST_DETAILS", value: "wish.list"],
            [constant:"ECOMMERCE_AUTO_GENERATED_PAGES_CHECKLIST", key: "wish_list", value: true],
            [constant:"SITE_CONFIG_TYPES", key: "WISH_LIST", value: WISH_LIST],
            [constant:"EMAIL_TYPE", key: "WISH_LIST", value: WISH_LIST],
            [constant:"ECOMMERCE_EMAIL_TYPE_CHECKLIST", key: WISH_LIST, value: true],
            [constant: "ECOMMERCE_PLUGIN_CHECKLIST", key: WISH_LIST, value: true],
    ]

    List named_constants = [
            [constant:"EMAIL_SETTING_MESSAGE_KEYS", key: WISH_LIST, value:"wish.list"],
    ]




    Map pageConfigs = [
            'product': ['add_to_wish_list': 'true'],
            'category_page': ['add_to_wish_list': 'true'],
            'search_page': ['add_to_wish_list': 'true'],
            'customer_profile_page': ['add_to_wish_list': 'true']
    ]

    def templates = [
            [
                    label: "wish.list.share",
                    identifier: "wish-list-share",
                    subject: "%customer_first_name% %customer_last_name% has shared a wishlist with you ",
                    isActiveReadonly: true,
                    type: WISH_LIST
            ]
    ]

    def tenantInit = { tenant ->
        DomainConstants.addConstant(domain_constants)
        NamedConstants.addConstant(named_constants)
        ConfigService.addTab(wish_list, [
                url: "wishListAdmin/loadConfig",
                message_key: "wish.list",
                ecommerce  : true
        ])
        Layout layout = Layout.first()

        if (!AutoGeneratedPage.findByName(DomainConstants.AUTO_GENERATED_PAGES.WISH_LIST_DETAILS)) {
            AutoGeneratedPage generatedPage = new AutoGeneratedPage(name: DomainConstants.AUTO_GENERATED_PAGES.WISH_LIST_DETAILS, title: "Wish List - %WISH_LIST_NAME%", layout: layout, editorEnable: false).save()
        }

        pageConfigs.each { type ->
            if(!SiteConfig.findAllByTypeAndConfigKey(type.key, "add_to_wish_list")) {
                type.value.each { entry ->
                    site_config_constants.add([constant: type.key, key: entry.key, value:entry.value])
                }
            }
        }

        if (!EmailTemplate.findAllByIdentifier("wish-list-share")) {
            new EmailTemplate(templates[0]).save()
        }
        site_config_constants.each { it ->
            if (!SiteConfig.findAllByTypeAndConfigKey(it.constant, it.key)) {
                new SiteConfig(type: it.constant, configKey: it.key, value: it.value).save()
                AppUtil.clearConfig it.constant
            }
        }

        if(!SiteConfig.findAllByTypeAndConfigKey(DomainConstants.SITE_CONFIG_TYPES.MY_LISTS, WISH_LIST_ORDER)){
            configService.setOrder(DomainConstants.SITE_CONFIG_TYPES.MY_LISTS,WISH_LIST_ORDER)
            AppUtil.clearConfig DomainConstants.SITE_CONFIG_TYPES.MY_LISTS
            AppUtil.clearConfig DomainConstants.SITE_CONFIG_TYPES.CUSTOMER_PROFILE_PAGE
        }
    }

    def tenantDestroy = { tenant ->
        ConfigService.removeTab(wish_list)
        PluginDestroyUtil util = new PluginDestroyUtil()
        try {
            site_config_constants.each { it ->
                util.removeSiteConfig(it.constant, it.key)
            }
            util.removeEmailTemplates(templates[0].identifier)
            NamedConstants.removeConstant(named_constants)
            DomainConstants.removeConstant(domain_constants)
            util.removeAutoPage(DomainConstants.AUTO_GENERATED_PAGES.WISH_LIST_DETAILS)
            util.removeSiteConfig(DomainConstants.SITE_CONFIG_TYPES.MY_LISTS,WISH_LIST_ORDER)
            configService.reorderFields(DomainConstants.SITE_CONFIG_TYPES.MY_LISTS,WISH_LIST_ORDER)
            AppUtil.clearConfig DomainConstants.SITE_CONFIG_TYPES.CUSTOMER_PROFILE_PAGE
        } catch(Exception e) {
            log.error "Could Not Deactivate Plugin wish-list From Tenant $tenant", e
            throw e
        } finally {
            util.closeConnection()
        }
    }

    def init = { servletContext ->

        TenantContext.eachParallelWithWait(tenantInit)

        HookManager.register("load-wishList-product-ids", { productIds, params ->
            if(params.type == "wishList") {//widget, details-page
                WishList wishList = WishList.get(params.id);
                config = AppUtil.getConfig(WISH_LIST)
                productIds = wishList.wishListItems.collect { it.productId };
                Map filterMap = [:]
                filterMap["product-sorting"] = params["prwd-sort"]
                productIds = Holders.applicationContext.productService.filterAvailableProducts(productIds, filterMap)
            }
            return productIds
        })
    }
}
