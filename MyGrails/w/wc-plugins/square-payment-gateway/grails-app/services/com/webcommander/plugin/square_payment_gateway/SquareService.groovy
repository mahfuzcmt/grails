package com.webcommander.plugin.square_payment_gateway

import com.webcommander.AutoGeneratedPage
import com.webcommander.constants.DomainConstants
import com.webcommander.manager.CartManager
import com.webcommander.models.AddressData
import com.webcommander.models.Cart
import com.webcommander.models.PaymentInfo
import com.webcommander.plugin.square_payment_gateway.communicator.SquareCommunicator
import com.webcommander.throwables.PaymentGatewayException
import com.webcommander.throwables.sso.OAuthException
import com.webcommander.util.AppUtil
import com.webcommander.webcommerce.Order
import com.webcommander.webcommerce.OrderService
import grails.gorm.transactions.Transactional
import org.apache.http.HttpStatus
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.beans.factory.annotation.Qualifier

@Transactional
class SquareService {

    OrderService orderService

    @Autowired
    @Qualifier("com.webcommander.ApplicationTagLib")
    com.webcommander.ApplicationTagLib app

    PaymentInfo resolveInfo(Map params) {
        def session = AppUtil.session
        Map transactionMap = SquareCommunicator.getTransactionInfo(params.transactionId)
        if(!transactionMap){
            throwPaymentGatewayException()
        }
        String status = (transactionMap.statusCode == HttpStatus.SC_OK) ? DomainConstants.PAYMENT_STATUS.SUCCESS : DomainConstants.PAYMENT_STATUS.FAILED
        PaymentInfo info = processPaymentInfo(transactionMap, session, status)
        return info
    }

    def processHostedPayment(){

        AutoGeneratedPage page = AutoGeneratedPage.findByName(DomainConstants.AUTO_GENERATED_PAGES.PAYMENT_SUCCESS_PAGE)
        String successScheme = page.isHttps ? "https" : "http"
        String redirectUrl = app.baseUrl(scheme: successScheme) + "squareTransaction/completeCheckout"

        def session = AppUtil.session
        Cart cart = CartManager.getCart(session.id, true)
        Order order = orderService.getOrder(cart.orderId)
        AddressData shipping = new AddressData(order.shipping)
        Integer totalAmount = Math.round((cart.tagged.payable + cart.tagged.surcharge).toCurrency() * 100)
        String paymentId = cart.tagged["payment"].id

        def checkoutUrl = SquareCommunicator.getCheckoutUrl(redirectUrl, order, shipping, totalAmount, paymentId)
        if(!checkoutUrl){
            throwPaymentGatewayException()
        }
        return checkoutUrl
    }

    PaymentInfo processApiPayment(def nonce) {

        def session = AppUtil.session
        Cart cart = CartManager.getCart(session.id, true)
        Long orderId = cart.orderId
        Long paymentId = cart.tagged["payment"].id

        String reference = paymentId
        Order order = orderService.getOrder(orderId)
        AddressData shipping = new AddressData(order.shipping)
        AddressData billing = new AddressData(order.billing)
        Integer totalAmount = Math.round((cart.tagged.payable + cart.tagged.surcharge).toCurrency() * 100)

        def transactionMap = SquareCommunicator.requestTransaction(nonce, billing, shipping, totalAmount, reference)
        if(!transactionMap){
            throwPaymentGatewayException()
        }
        String status = (transactionMap.statusCode == HttpStatus.SC_OK) ? DomainConstants.PAYMENT_STATUS.SUCCESS : DomainConstants.PAYMENT_STATUS.FAILED

        PaymentInfo info = processPaymentInfo(transactionMap, session, status)
        return info
    }

    PaymentInfo processPaymentInfo(Map transactionMap, def session, String status){
        PaymentInfo info = new PaymentInfo()
        info.amount = transactionMap.amount.toDouble()  / 100
        info.gatewayResponse = transactionMap.gatewayResponse
        info.paymentRef = transactionMap["paymentRef"].toLong()
        info.payerInfo =  session.customer ? "Customer#" +  session.customer : "Guest Customer (${transactionMap.cardInfo})"
        info.success = status == DomainConstants.PAYMENT_STATUS.SUCCESS
        info.trackInfo = transactionMap.trackInfo
        return info
    }

    def throwPaymentGatewayException(){
        String errorMessage = "could.not.process.payment.contact.with.vendor"
        throw new PaymentGatewayException(errorMessage)
    }

    def processOAuthCallback(Map params){
        if(params.error){
            throw new OAuthException(params.error_description)
        }
        if(params.state != SquareCommunicator.WEB_COMMANDER){
            throw new OAuthException("invalid.auth.request")
        }
        String authCode = params.code
        def responseType = params.response_type
        String redirectUrl = "${app.baseUrl()}square/oAuthCallback"
        return SquareCommunicator.requestAccessToken(authCode, redirectUrl)
    }
}
