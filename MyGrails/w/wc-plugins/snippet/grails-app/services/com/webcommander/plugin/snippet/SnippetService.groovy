package com.webcommander.plugin.snippet

import com.webcommander.admin.Operator
import com.webcommander.admin.RoleService
import com.webcommander.common.CommonService
import com.webcommander.common.FileService
import com.webcommander.constants.NamedConstants
import com.webcommander.content.Section
import com.webcommander.events.AppEventManager
import com.webcommander.manager.HookManager
import com.webcommander.models.RestrictionPolicy
import com.webcommander.models.blueprints.DisposableUtilServiceModel
import com.webcommander.task.MultiLoggerTask
import com.webcommander.task.TaskService
import com.webcommander.throwables.ApplicationRuntimeException
import com.webcommander.util.AppUtil
import com.webcommander.util.StringUtil
import grails.converters.JSON
import grails.gorm.transactions.Transactional
import org.apache.commons.io.FilenameUtils
import org.springframework.web.multipart.MultipartFile

@Transactional
class SnippetService implements DisposableUtilServiceModel {
    SnippetRepositoryService snippetRepositoryService
    TaskService taskService
    FileService fileService
    CommonService commonService

    private String cloudType = NamedConstants.CLOUD_CONFIG.SYSTEM_DEFAULT

    static {
        HookManager.register("beforeManageUserPermission beforeSaveUserPermission", { Map response, Map params ->
            if (params.type == "snippet") {
                Long admin = AppUtil.session.admin
                response.deniedPolicy = new RestrictionPolicy(type: "snippet", permission: "edit.permission")
                response.allowed = RoleService.getInstance().isPermitted(admin, response.deniedPolicy, params)
            }
            return response
        })

        AppEventManager.on("before-operator-delete", { id ->
            Snippet.executeUpdate("update Snippet s set s.createdBy = null where s.createdBy.id = :uid", [uid: id])
        })
    }

    Snippet getSnippet(Long id) {
        return Snippet.get(id);
    }

    def saveSnippet(Map params) {
        Long id = params.id.toLong(0);
        checkForDuplicateSnippet(params.name, id);
        Snippet snippet = id ? Snippet.get(id) : new Snippet();
        snippet.name = params.name.trim();
        snippet.description = params.description.trim();
        snippet.parent = params.parent ? Section.proxy(params.parent) : null
        snippet.isDisposable = false
        snippet.isAutoGenerated = params?.isAutoGenerated ?: false
        snippet.save();
        if (id) AppEventManager.fire("snippet-update", [id])
        return snippet;
    }

    Boolean saveContent(Map params) {
        Snippet snippet = Snippet.get(params.id)
        String id = snippet.id
        String path = SnippetResourceTagLib.getResourceRelativePath(id)

        String content = params.content ?: ""
        String relativePath = "${path}/${SnippetResourceTagLib.SNIPPET_HTML}"
        fileService.putResource(content, relativePath, cloudType)

        content = getSnippetCss(params)
        relativePath = "${path}/${SnippetResourceTagLib.SNIPPET_CSS}"
        fileService.putResource(content, relativePath, cloudType)

        snippet.isDisposable = false
        snippet.save()
        AppEventManager.fire("snippet-update", [snippet.id])
        return true
    }

    Boolean copy(Long id, Long admin){
        Snippet snippet = getSnippet(id)
        Snippet copySnippet = new Snippet()
        copySnippet.id = null
        copySnippet.name = commonService.getCopyNameForDomain(snippet)
        copySnippet.description = snippet.description
        copySnippet.isDisposable = snippet.isDisposable
        copySnippet.isAutoGenerated = false
        copySnippet.createdBy = Operator.proxy(admin)
        copySnippet.parent = snippet.parent ?: null
        copySnippet.save(flash: true)

        String htmlPath = SnippetResourceTagLib.getResourceRelativePath(id.toString(), SnippetResourceTagLib.SNIPPET_HTML)
        String cssPath = SnippetResourceTagLib.getResourceRelativePath(id.toString(), SnippetResourceTagLib.SNIPPET_CSS)
        InputStream htmlContent = fileService.readResourceFileContentFromSystem(htmlPath, cloudType)
        InputStream cssContent = fileService.readResourceFileContentFromSystem(cssPath, cloudType)

        if(htmlContent){
            String path = SnippetResourceTagLib.getResourceRelativePath(copySnippet.id.toString())
            String relativePath = "${path}/${SnippetResourceTagLib.SNIPPET_HTML}"
            fileService.putResource(htmlContent, relativePath, cloudType)
        }
        if(cssContent){
            String path = SnippetResourceTagLib.getResourceRelativePath(copySnippet.id.toString())
            String relativePath = "${path}/${SnippetResourceTagLib.SNIPPET_CSS}"
            fileService.putResource(cssContent, relativePath, cloudType)
        }

        AppEventManager.fire("snippet-update", [copySnippet.id])
        return true
    }

    Boolean deleteSnippet(Long id) {
        Snippet snippet = Snippet.get(id);
        AppEventManager.fire("before-snippet-delete", [snippet.id])
        snippet.delete();
        if (!snippet.hasErrors()) {
            AppEventManager.fire("snippet-delete")
            String path = SnippetResourceTagLib.getResourceRelativePath(snippet.id.toString())
            fileService.removeResource(path, cloudType)
            return true
        }
        return false
    }

    def deleteSelectedSnippets(List ids) {
        int removeCount = 0;
        ids.each { id ->
            if(deleteSnippet(id)) {
                removeCount++;
            }
        }
        return removeCount;
    }

    def checkForDuplicateSnippet(String name, Long id) {
        Integer count = Snippet.createCriteria().count {
            if (id != 0) {
                ne("id", id)
            }
            eq("name", name)
        }
        if (count > 0) {
            throw new ApplicationRuntimeException("snippet.name.exists")
        }
    }

    Integer getSnippetCount(Map params) {
        return Snippet.createCriteria().count {
            and getCriteriaClosure(params)
        }
    }

    List<Snippet> getSnippetList(Map params) {
        def listMap = [offset: params.offset, max: params.max]
        return Snippet.createCriteria().list(listMap) {
            and getCriteriaClosure(params)
            order(params.sort ?: "name", params.dir ?: "asc")
        }
    }

    List<Snippet> getSnippetListForExplorer(Map params, Map listMap) {
        Long id = params.id.toLong(0);
        return Snippet.createCriteria().list(listMap) {
            if (id == 0) {
                isNull("parent")
            } else {
                eq("parent.id", id)
            }
            and getCriteriaClosure(params)
        }
    }

    private Closure getCriteriaClosure(Map params) {
        def session = AppUtil.session;
        return {
            if (params.searchText) {
                ilike("name", "%${params.searchText.trim().encodeAsLikeText()}%")
            }
            if (params.name) {
                ilike("name", "%${params.name.trim().encodeAsLikeText()}%")
            }
            if (params.section) {
                if (params.section == "root" || params.section == "0") {
                    isNull("parent")
                } else {
                    eq("parent.id", params.section.toLong(0))
                }
            }
            if (params.createdFrom) {
                Date date = params.createdFrom.dayStart.gmt(session.timezone);
                ge("created", date);
            }
            if (params.createdTo) {
                Date date = params.createdTo.dayEnd.gmt(session.timezone);
                le("created", date);
            }
            if (params.updatedFrom) {
                Date date = params.updatedFrom.dayStart.gmt(session.timezone);
                ge("updated", date);
            }
            if (params.updatedTo) {
                Date date = params.updatedTo.dayEnd.gmt(session.timezone);
                le("updated", date);
            }
            if (params.isDisposable != "true") {
                eq("isDisposable", false)
            } else {
                eq("isDisposable", true)
            }
            if (params.isAutoGenerated != "true") {
                eq("isAutoGenerated", false)
            } else {
                eq("isAutoGenerated", true)
            }
        }
    }

    String getSnippetContent(Map params) {
        if (params.templateUUID) {
            return snippetRepositoryService.getSnippetTemplateContent(params.repositoryType, params.templateUUID)
        }
        String path = SnippetResourceTagLib.getResourceRelativePath(params.id, SnippetResourceTagLib.SNIPPET_HTML)
        InputStream content = fileService.readResourceFileContentFromSystem(path, cloudType)
        if (content) {
            return content.text
        }
        return ""
    }

    String getSnippetCss(Map params) {
        if (params.templateUUID) {
            return snippetRepositoryService.getSnippetTemplateCss(params.repositoryType, params.templateUUID)
        }
        String id = params.id;

        String path = SnippetResourceTagLib.getResourceRelativePath(id)
        String relativePath = "${path}/${SnippetResourceTagLib.SNIPPET_CSS}"
        InputStream content = fileService.readResourceFileContentFromSystem(relativePath, cloudType)
        if (content) {
            return content.text
        }
        return ""
    }

    Boolean saveSnippetTemplate(Map params, MultipartFile thumb) {
        String uuid = params.uuid ?: StringUtil.uuid
        Map info = snippetRepositoryService.getLocalSnippetTemplate(params.uuid) ?: [:]
        String path = SnippetResourceTagLib.getModifiableResourceWebInfAbsolutePath(uuid)
        String relativePath = SnippetResourceTagLib.getModifiableResourceRelativePath(uuid)
        File templateDir = new File(path)
        templateDir.mkdirs()
        if (!thumb && !params.uuid) {
            throw new ApplicationRuntimeException("thumb.image.is.required")
        }
        if (info.isSystemDefault != false) {
            // TODO
        }
        try {
            info += [uuid: uuid, name: params.name, category: params.category, isSystemDefault: false]
            if (thumb) {
                String thumbName = "thumb." + FilenameUtils.getExtension(thumb.originalFilename)
                fileService.putModifiableResource(thumb.inputStream,"${SnippetResourceTagLib.getModifiableResourceRelativePath(uuid)}/${thumbName}", cloudType)
                info.thumb = thumbName
            } else if (info.thumb_file_name) {
                info.thumb = info.thumb_file_name
            }

            String content = params.html
            String resourcePath = "${relativePath}/${SnippetResourceTagLib.SNIPPET_HTML}"
            fileService.putModifiableResource(content, resourcePath, cloudType)

            content = params.css ?: ""
            resourcePath = "${relativePath}/${SnippetResourceTagLib.SNIPPET_CSS}"
            fileService.putModifiableResource(content, resourcePath, cloudType)

            content = (info as JSON).toString()
            resourcePath = "${relativePath}/${SnippetResourceTagLib.SNIPPET_INFO_JSON}"
            fileService.putModifiableResource(content, resourcePath, cloudType)

        } catch (Exception ex) {
            templateDir.deleteDir()
            return false
        }
        return true
    }

    Map getThumbnail(String uuid) {
        String relativePath = SnippetResourceTagLib.getModifiableResourceRelativePath(uuid)
        InputStream inputStream = fileService.readModifiableResourceFromSystem("${relativePath}/${SnippetResourceTagLib.SNIPPET_INFO_JSON}", cloudType)
        if (inputStream == null) {
            return null
        }
        Map info = JSON.parse(inputStream.text)
        if (info != null) {
            inputStream = fileService.readModifiableResourceFromSystem("${relativePath}/${info.thumb}", cloudType)
            String mimeType = URLConnection.guessContentTypeFromName(info.thumb)
            if (inputStream) {
                return [inputStream: inputStream, mimeType: mimeType]
            }
        }
        return null
    }


    Boolean deleteSnippetTemplate(String uuid) {
        String path = SnippetResourceTagLib.getModifiableResourceRelativePath(uuid)
        fileService.removeModifiableResource(path, cloudType)
        return true
    }

    @Override
    Integer countDisposableItems(String itemType) {
        return getSnippetCount([isDisposable: "true"])
    }

    @Override
    void removeDisposableItems(String itemType, MultiLoggerTask task) {
        Snippet.withNewSession {session ->
            List<Snippet> snippets  = this.getSnippetList([isDisposable: "true"])
            for (Snippet snippet : snippets) {
                try {
                    this.deleteSnippet(snippet.id)
                    session.flush()
                    task.progress = taskService.countProgress(task.totalRecord, ++task.recordComplete)
                    task.taskLogger.success("Snippet: $snippet.name", "")
                    task.meta.successCount++
                } catch (Exception e) {
                    task.progress = taskService.countProgress(task.totalRecord, ++task.recordComplete)
                    task.taskLogger.error("Snippet: $snippet.name", e.message)
                    task.meta.errorCount++;
                }
            }
        }
    }
}
