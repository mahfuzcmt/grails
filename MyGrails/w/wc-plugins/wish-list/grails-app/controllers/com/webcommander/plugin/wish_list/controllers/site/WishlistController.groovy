package com.webcommander.plugin.wish_list.controllers.site

import com.webcommander.admin.Customer
import com.webcommander.authentication.annotations.AutoGeneratedPage
import com.webcommander.authentication.annotations.License
import com.webcommander.authentication.annotations.RequiresCustomer
import com.webcommander.constants.DomainConstants
import com.webcommander.constants.NamedConstants
import com.webcommander.models.ProductData
import com.webcommander.plugin.wish_list.WishList
import com.webcommander.plugin.wish_list.WishListItem
import com.webcommander.plugin.wish_list.WishListService
import com.webcommander.throwables.ApplicationRuntimeException
import com.webcommander.throwables.CartManagerException
import com.webcommander.util.AppUtil
import com.webcommander.webcommerce.Product
import com.webcommander.webcommerce.ProductService
import grails.converters.JSON
import com.webcommander.manager.HookManager

class WishlistController {
    ProductService productService
    WishListService wishListService

    @License(required = "allow_wishlist_feature")
    def add() {
        Boolean success
        String message
        Long productId = params.long("productId")
        Product product = Product.get(productId)
        ProductData productData = productService.getProductData(product)
        WishList wishList = WishList.get(params.long("wishList"))
        WishListItem item
        try {
            item = wishListService.addToWishList(wishList, product)
            success = true;
        } catch (ApplicationRuntimeException e) {
          success = false
          message = e.message
        } catch(Exception ex) {
            success = false;
        }
        def html = g.include(view: "/plugins/wish_list/site/addToWishList.gsp", model: [success: success, listItem: item, wishList: wishList, errorMessage: message,
                                                                                        totalItem: wishList ? wishList.wishListItems.size() : 0, object: productData])
        render([status: "added", html: html.toString()] as JSON)
    }

    def wishListPopup() {
        Long productId = params.long("productId");
        if (!session.customer) {
            render([status: "error", url: "customer/login"] as JSON);
            return;
        }
        Customer customer = Customer.get(session.customer);
        Integer count = WishList.countByCustomer(customer);
        def html = g.include(view:  "/plugins/wish_list/site/popup.gsp", model: [customer: customer, count: count, productId: productId]).toString();
        render([status: "success", html: html] as JSON)
    }

    @RequiresCustomer
    def save() {
        Long productId = params.long("productId");
        Customer customer = Customer.get(session.customer);
        if (wishListService.save(params, customer)) {
            Integer count = WishList.countByCustomer(customer);
            def html = g.include(view:  "/plugins/wish_list/site/popup.gsp", model: [customer: customer, count: count, productId: productId]);
            render([status: "success", html: html.toString()] as JSON);
        } else {
            render([status: "error", message: "error"] as JSON);
        }
    }

    @RequiresCustomer
    def loadWishList() {
        Customer customer = Customer.get(session.customer)
        List<WishList> wishLists = WishList.findAllByCustomer(customer)
        render(template: "/plugins/wish_list/site/loadWishList", model: [wishLists: wishLists])
    }

    @RequiresCustomer
    def edit() {
        WishList wishList;
        if(params.id) {
            wishList = WishList.get(params.id)
        } else {
            wishList = new WishList()
        }
        def productIds = wishList.wishListItems.collect { it.productId };
        List productDataList = productService.getProductData(productIds, [:], true)
        render(view: "/plugins/wish_list/site/edit", model: [wishList: wishList, productDataList: productDataList]);
    }

    @RequiresCustomer
    def saveWishList() {
        Customer customer = Customer.get(session.customer);
        def result;
        try {
            result = wishListService.save(params, customer)
        } catch (CartManagerException e) {
            render([status: "error", message: g.message(code: e.message, args: e.messageArgs)] as JSON)
            return;
        }
        if (result) {
            render([status: "success", message: g.message(code: "wish.list.${params.id ? "update" : "save"}.success")] as JSON)
        } else {
            render([status: "error", message: g.message(code: "wish.list.${params.id ? "update" : "save"}.failure")] as JSON)
        }
    }

    @RequiresCustomer
    def remove() {
        if(wishListService.remove(params.long("id"))) {
            render([status: "success", message: g.message(code: "wish.list.delete.success")] as JSON)
        } else {
            render([status: "success", message: g.message(code: "wish.list.delete.failure")] as JSON)
        }
    }

    @RequiresCustomer
    def editShare() {
        WishList wishList = WishList.get(params.id);
        if (wishList.wishListItems.size() == 0) {
            render([status: "error", message: g.message(code: "no.product.added.to.wish.list")] as JSON)
            return;
        }
        def html = g.include(view: "/plugins/wish_list/site/shareList.gsp", model: [wishList: wishList, id: params.id]);
        render([status: "success", html: html.toString()] as JSON)
    }

    @RequiresCustomer
    def share(){
        if (wishListService.share(params)) {
            render([status: "success", message: g.message(code: "wish.list.share.success")] as JSON)
        } else {
            render([status: "error", message: g.message(code: "wish.list.share.failure")] as JSON)
        }
    }

    @AutoGeneratedPage("wish.list")
    def details() {
        WishList wishList = WishList.get(params.id);
        if(!wishList){
            response.setStatus(404)
            forward(controller: "exception", action: "handle404")
            return
        }
        def config = AppUtil.getConfig(DomainConstants.SITE_CONFIG_TYPES.WISH_LIST)
        def productIds = wishList.wishListItems.collect { it.productId };
        Map filterMap = [:];
        config["product-sorting"] = params["prwd-sort"]
        config["product_listing_id"] = "wish-list-product-listing"
        filterMap["product-sorting"] = params["prwd-sort"]
        int max = -1;
        int offset = 0;
        if(config["show-pagination"] != "none" && config['display-type'] != NamedConstants.PRODUCT_WIDGET_VIEW.SCROLLABLE) {
            filterMap['offset'] = offset = params.int("prwd-offset") ?: 0;
            filterMap['max'] = max = params.int("prwd-max") ?: (config["item-per-page"].toInteger(null) ?: -1)
        }
        Integer totalCount = productService.filterOutAvailableProductCount(productIds, filterMap)
        def productList = productService.getProductData(productIds, filterMap)
        String view = "/site/siteAutoPage";
        Map model = [
                name: DomainConstants.AUTO_GENERATED_PAGES.WISH_LIST_DETAILS,
                productList: productList, config: config, max: max, offset: offset, totalCount: totalCount,
                wishList: wishList, macros: [WISH_LIST_NAME: wishList.name],
                view: "/plugins/wish_list/site/details.gsp"
        ];
        view = HookManager.hook("auto-page-view-model", view, model);
        render (view: view, model: model)
    }

    @RequiresCustomer
    def deleteItem() {
        if(wishListService.removeItem(params)) {
            render([status: "success", message: g.message(code: "wish.list.item.delete.success")] as JSON)
        } else {
            render([status: "error", message: g.message(code: "wish.list.item.delete.failure")] as JSON)
        }
    }
}
