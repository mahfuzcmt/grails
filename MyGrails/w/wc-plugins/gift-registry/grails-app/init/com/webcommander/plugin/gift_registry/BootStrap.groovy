package com.webcommander.plugin.gift_registry

import com.webcommander.AutoGeneratedPage
import com.webcommander.admin.ConfigService
import com.webcommander.admin.MessageSource
import com.webcommander.beans.SiteMessageSource
import com.webcommander.config.EmailTemplate
import com.webcommander.config.SiteConfig
import com.webcommander.constants.DomainConstants
import com.webcommander.constants.NamedConstants
import com.webcommander.design.Layout
import com.webcommander.events.AppEventManager
import com.webcommander.manager.CartManager
import com.webcommander.manager.HookManager
import com.webcommander.models.AddressData
import com.webcommander.models.Cart
import com.webcommander.models.CartItem
import com.webcommander.parser.EmailTemplateParser
import com.webcommander.tenant.TenantContext
import com.webcommander.throwables.CartManagerException
import com.webcommander.util.AppUtil
import com.webcommander.util.PluginDestroyUtil
import grails.util.Holders

class BootStrap {
    private final String GIFT_REGISTRY = "gift_registry"
    private final String gift_registry = "giftRegistry"
    private final String GIFT_REGISTRY_LABEL = "gift_registry_label"
    private final String GIFT_REGISTRY_ACTIVE = "gift_registry_active"
    private final String GIFT_REGISTRY_DEFAULT_LABEL = "gift_registry_default_label"
    private final String GIFT_REGISTRY_ORDER = "gift_registry_order"

    ConfigService configService

    List site_config_constants = [
            [constant: DomainConstants.SITE_CONFIG_TYPES.CUSTOMER_PROFILE_PAGE, key: "my_lists_label", value: "My Lists"],
            [constant: DomainConstants.SITE_CONFIG_TYPES.CUSTOMER_PROFILE_PAGE, key: "my_lists_default_label", value: "My Lists"],
            [constant: DomainConstants.SITE_CONFIG_TYPES.CUSTOMER_PROFILE_PAGE, key: "my_lists_active", value: "true"],
            [constant: DomainConstants.SITE_CONFIG_TYPES.MY_LISTS, key: GIFT_REGISTRY_LABEL, value: "Gift Registry"],
            [constant: DomainConstants.SITE_CONFIG_TYPES.MY_LISTS, key: GIFT_REGISTRY_DEFAULT_LABEL, value: "Gift Registry"],
            [constant: DomainConstants.SITE_CONFIG_TYPES.MY_LISTS, key: GIFT_REGISTRY_ACTIVE, value: "true"],
            [constant: DomainConstants.SITE_CONFIG_TYPES.MY_ACCOUNT_PAGE, key: GIFT_REGISTRY, value: "false"],
            [constant: GIFT_REGISTRY, key: "display-type", value: "list"],
            [constant: GIFT_REGISTRY, key: "show-pagination", value: "bottom"],
            [constant: GIFT_REGISTRY, key: "item-per-page", value: "10"],
            [constant: GIFT_REGISTRY, key: "price", value: "true"],
            [constant: GIFT_REGISTRY, key: "description", value: "true"],
            [constant: GIFT_REGISTRY, key: "add_to_cart", value: "true"],
            [constant: GIFT_REGISTRY, key: "add_to_compare", value: "true"],
            [constant: GIFT_REGISTRY, key: "show_on_hover", value: "false"],
            [constant: GIFT_REGISTRY, key: "add_to_wish_list", value: "true"],
            [constant: GIFT_REGISTRY, key: "item-per-page-selection", value: "true"],
            [constant: GIFT_REGISTRY, key: "sortable", value: "false"],
            [constant: GIFT_REGISTRY, key: "quantity_selector", value: "true"],
            [constant: GIFT_REGISTRY, key: "show_view_switcher", value: "true"],
            [constant: DomainConstants.SITE_CONFIG_TYPES.PRODUCT, key: "add_to_gift_registry", value: "true"]
    ]

    List domain_constants = [
            [constant:"AUTO_GENERATED_PAGES", key: "GIFT_REGISTRY_DETAILS", value: "gift.registry"],
            [constant:"EMAIL_TYPE", key: "GIFT_REGISTRY", value: GIFT_REGISTRY],
            [constant:"ECOMMERCE_EMAIL_TYPE_CHECKLIST", key: GIFT_REGISTRY, value: true],
            [constant:"ECOMMERCE_AUTO_GENERATED_PAGES_CHECKLIST", key: "gift_registry", value: true],
            [constant: "ECOMMERCE_PLUGIN_CHECKLIST", key: GIFT_REGISTRY, value: true],
            [constant:"SITE_CONFIG_TYPES", key: "GIFT_REGISTRY", value: GIFT_REGISTRY],
    ]

    List named_constants = [
            [constant:"EMAIL_SETTING_MESSAGE_KEYS", key: GIFT_REGISTRY, value:"gift.registry"],
    ]

    def templates = [
            [
                    label: "gift.registry.share",
                    identifier: "gift-registry-share",
                    subject: "%customer_first_name%%if:customer_last_name% %customer_last_name%%if% has shared a gift registry with you ",
                    isActiveReadonly: true,
                    type: GIFT_REGISTRY
            ]
    ]

    Map siteMessages = [
            "select.only.gift.product.or.remove.all.gift.from.gift": "Please select only gifts for your current order or remove all gifts from your shopping cart.",
            "select.product.from.current.registry" : "Please select gifts from %registry_name% gift registry for your current order or remove all gifts from your shopping cart.",
            "remove.non.gift.product.from.cart": "Please remove all non-gifts from your shopping cart before adding a gift to ensure correct shipping and order tracking.",
            "address.line": "Address Line"
    ]




    def tenantInit = { tenant ->
        DomainConstants.addConstant(domain_constants)
        NamedConstants.addConstant(named_constants)
        ConfigService.addTab(gift_registry, [
                url: "giftRegistryAdmin/loadConfig",
                message_key: "gift.registry",
                ecommerce  : true
        ]);
        Layout layout = Layout.first()
        if (!AutoGeneratedPage.findByName(DomainConstants.AUTO_GENERATED_PAGES.GIFT_REGISTRY_DETAILS)) {
            new AutoGeneratedPage(name: DomainConstants.AUTO_GENERATED_PAGES.GIFT_REGISTRY_DETAILS, title: "Gift Registry - %GIFT_REGISTRY_NAME%", layout: layout, editorEnable: false).save()
        }
        if (!EmailTemplate.findAllByIdentifier("gift-registry-share")) {
            new EmailTemplate(templates[0]).save()
        }
        siteMessages.each {
            if (!MessageSource.findByMessageKeyAndLocale(it.key, 'all')) {
                new MessageSource(messageKey: it.key, message: it.value, locale: "all").save();
            }
        }

        site_config_constants.each { it ->
            if (!SiteConfig.findAllByTypeAndConfigKey(it.constant, it.key)) {
                new SiteConfig(type: it.constant, configKey: it.key, value: it.value).save()
                AppUtil.clearConfig it.constant
            }
        }

        if(!SiteConfig.findAllByTypeAndConfigKey(DomainConstants.SITE_CONFIG_TYPES.MY_LISTS, GIFT_REGISTRY_ORDER)){
            configService.setOrder(DomainConstants.SITE_CONFIG_TYPES.MY_LISTS,GIFT_REGISTRY_ORDER)
            AppUtil.clearConfig DomainConstants.SITE_CONFIG_TYPES.MY_LISTS
            AppUtil.clearConfig DomainConstants.SITE_CONFIG_TYPES.CUSTOMER_PROFILE_PAGE
        }
        if(!SiteConfig.findAllByTypeAndConfigKey(DomainConstants.SITE_CONFIG_TYPES.CUSTOMER_PROFILE_PAGE, "my_lists_order")){
            configService.setOrder(DomainConstants.SITE_CONFIG_TYPES.CUSTOMER_PROFILE_PAGE,"my_lists_order")
            AppUtil.clearConfig DomainConstants.SITE_CONFIG_TYPES.CUSTOMER_PROFILE_PAGE
        }
    }

    def tenantDestroy = { tenant ->
        ConfigService.removeTab(gift_registry)
        PluginDestroyUtil util = new PluginDestroyUtil()
        try {
            siteMessages.each {
                util.removeSiteMessage(it.key)
            }
            site_config_constants.each { it ->
                if(it.constant == DomainConstants.SITE_CONFIG_TYPES.CUSTOMER_PROFILE_PAGE && configService.getSortedFields(AppUtil.getConfig(DomainConstants.SITE_CONFIG_TYPES.MY_LISTS)).size() == 1){
                    util.removeSiteConfig(it.constant, it.key)
                } else if(it.constant != DomainConstants.SITE_CONFIG_TYPES.CUSTOMER_PROFILE_PAGE) {
                    util.removeSiteConfig(it.constant, it.key)
                }
            }
            if(configService.getSortedFields(AppUtil.getConfig(DomainConstants.SITE_CONFIG_TYPES.MY_LISTS)).size() == 1){
                util.removeSiteConfig(DomainConstants.SITE_CONFIG_TYPES.CUSTOMER_PROFILE_PAGE, "my_lists_order")
            }
            configService.reorderFields(DomainConstants.SITE_CONFIG_TYPES.CUSTOMER_PROFILE_PAGE, "my_lists_order")
            util.removeEmailTemplates(templates[0].identifier)
            util.removeAutoPage(DomainConstants.AUTO_GENERATED_PAGES.GIFT_REGISTRY_DETAILS)
            NamedConstants.removeConstant(named_constants)
            DomainConstants.removeConstant(domain_constants)
            util.removeSiteConfig(DomainConstants.SITE_CONFIG_TYPES.MY_LISTS,GIFT_REGISTRY_ORDER)
            configService.reorderFields(DomainConstants.SITE_CONFIG_TYPES.MY_LISTS,GIFT_REGISTRY_ORDER)
            AppUtil.clearConfig DomainConstants.SITE_CONFIG_TYPES.CUSTOMER_PROFILE_PAGE
        } catch(Exception e) {
            log.error "Could Not Deactivate Plugin gift-registry From Tenant $tenant", e
            throw e
        } finally {
            util.closeConnection()
        }

    }

    def init = { servletContext ->
        TenantContext.eachParallelWithWait(tenantInit)
        HookManager.register("productListViewCustomQuantity", {supportedMin, product ->
            def request = AppUtil.request
            if (!request.gift_registry_page) {
                return supportedMin;
            } else if (product.supportedMaxOrderQuantity && product.giftItem.quantity > product.supportedMaxOrderQuantity) {
                return product.supportedMaxOrderQuantity;
            } else {
                return product.giftItem.quantity
            }
        });

        AppEventManager.on("cart-total-updated", {cart ->
            def params = AppUtil.params;
            def session = AppUtil.session;
            if (params.giftRegistryId) {
                session.cart_for_gift_registry = params.long("giftRegistryId")
            }
            if (!cart.orderId && !cart.cartItemList.size()) {
                session.cart_for_gift_registry = null;
            }
        });

        AppEventManager.on("cart-removed", { cart ->
            def session = AppUtil.session;
            session.cart_for_gift_registry = null
        });

        HookManager.register("beforeCartItemQuantityUpdate populateCartItem", { CartItem cartItem, Integer quantity, productData = null ->
            def params = AppUtil.params;
            def session = AppUtil.session;
            GiftRegistry registry = GiftRegistry.get(params.giftRegistryId);
            registry = registry ?: GiftRegistry.get(session.cart_for_gift_registry);
            GiftRegistryItem registryItem = GiftRegistryItem.get(params.giftItemId);
            if (!registryItem && registry) {
                List<GiftRegistryItem> items = registry.giftItems.findAll {
                    it.product.id == cartItem.object.id;
                }
                registryItem = items ?  items.find {
                    CartManager.isVariationMatch(it.variations, cartItem.variations)
                } : null;
            }
            Cart cart = CartManager.getCart(session.id, false);
            Boolean hasException = false;
            String message = "";
            List args = [];
            if (session.cart_for_gift_registry && session.cart_for_gift_registry != registry.id) {
                hasException = true;
                registry = GiftRegistry.get(session.cart_for_gift_registry);
                message = AppUtil.getBean(SiteMessageSource).convert("s:select.product.from.current.registry");
                Map bindings = [registry_name: registry.name.encodeAsBMHTML()]
                message = EmailTemplateParser.parse(message, bindings);
            } else if (!params.giftItemId && params.action != "update" && session.cart_for_gift_registry) {
                hasException = true;
                message = "s:select.only.gift.product.or.remove.all.gift.from.gift";
            } else if(cart && cart.cartItemList.size() && !session.cart_for_gift_registry && registry) {
                hasException = true;
                message = "s:remove.non.gift.product.from.cart";
            } else if (registryItem && registryItem.remain < quantity) {
                    hasException = true
                    message = "s:you.can.buy.maximum.quantity.for.product"
                    args = [registryItem.remain];
            }
            if (hasException) {
                throw new CartManagerException(cartItem.object, message, args);
            }
        });

        AppEventManager.on("before-add-to-cart", {Map params ->
            GiftRegistryItem item = null
            if(params.giftItemId && (item = GiftRegistryItem.get(params.giftItemId))) {
                if(item.variation) {
                    params.config = [variation: item.variation]
                }
                if(item.included) {
                    params.included = item.included
                }
            }
        })

        AppEventManager.on("before-checkout", {
            def session = AppUtil.session;
            if (session.cart_for_gift_registry) {
                GiftRegistry registry = GiftRegistry.get(session.cart_for_gift_registry);
                session.effective_shipping_address = new AddressData(registry.address);
                AppEventManager.fire("effective-shipping-change", [session.id])
            }
        })

        HookManager.register("load-giftRegistry-product-ids", { productIds, params ->
            if(params.type == "giftRegistry") {//widget, details-page
                GiftRegistry giftRegistry = GiftRegistry.get(params.id);
                config = AppUtil.getConfig(GIFT_REGISTRY)
                productIds = giftRegistry.giftItems.collect { it.productId };
                Map filterMap = [:]
                filterMap["product-sorting"] = params["prwd-sort"]
                productIds = Holders.applicationContext.productService.filterAvailableProducts(productIds, filterMap)
            }
            return productIds
        })
    }
}
