package com.webcommander.plugin.simplified_event_management.controllers

import com.webcommander.admin.Customer
import com.webcommander.authentication.annotations.AutoGeneratedPage
import com.webcommander.constants.DomainConstants
import com.webcommander.manager.CartManager
import com.webcommander.models.Cart
import com.webcommander.plugin.simplified_event_management.SimplifiedEvent
import com.webcommander.plugin.simplified_event_management.model.CartSimplifiedEventTicket
import com.webcommander.plugin.simplified_event_management.webmarketing.SimplifiedEventService
import com.webcommander.util.AppUtil
import grails.converters.JSON
import com.webcommander.manager.HookManager
class SimplifiedEventController {

    SimplifiedEventService simplifiedEventService

    @AutoGeneratedPage("simplified.event")
    def details() {
        Long id = params.id.toLong(0)
        SimplifiedEvent event = SimplifiedEvent.findById(id)
        if (!event) {
            response.setStatus(404)
            forward(controller: "exception", action: "handle404")
            return
        }
        String view = "/site/siteAutoPage";
        Map model = [name: DomainConstants.AUTO_GENERATED_PAGES.SIMPLIFIED_EVENT_DETAILS, view: "/plugins/simplified_event_management/site/eventDetails.gsp", event: event, metaTags: event.metaTags, title: event.title, macros: [SIMPLIFIED_EVENT_NAME: event.name]];
        view = HookManager.hook("auto-page-view-model", view, model);
        render (view: view, model: model)
    }

    def sendPersonalizedProgram() {
        Long eventId = params.eventId.toLong(0)
        SimplifiedEvent event = SimplifiedEvent.get(eventId)
        Long customerId = AppUtil.session.customer
        Customer customer
        String email = ""
        String customerName = g.message(code: "customer")
        if(customerId > 0) {
            customer = Customer.get(customerId)
            email = customer.address.email
            customerName = customer.firstName + " " + customer.lastName
        } else if(params.email) {
            email = params.email
        }
        if(simplifiedEventService.sendPersonalizedProgram(email, event, customerName)) {
            render([status: "success", message: g.message(code: "personalized.program.request.success", args: [event.name])] as JSON)
        } else {
            render([status: "error", message: g.message(code: "personalized.program.request.error")] as JSON)
        }
    }

    def loadCustomFieldsStep() {
        Map model = simplifiedEventService.getFieldsOrTitle(params.eventId.toLong());
        render(view: "/plugins/simplified_event_management/site/customFieldBlock.gsp", model: [fields: model.fields, eventId: params.eventId, quantity: params.quantity.toInteger()]);
    }

    def holdFields() {
        if(!CartManager.hasCart(session.id)) {
            render(text: g.message(code: "cart.not.available"), status: 412)
            return;
        }
        session[params.eventId] = params.custom;
        render([status: "success"] as JSON);
    }

}