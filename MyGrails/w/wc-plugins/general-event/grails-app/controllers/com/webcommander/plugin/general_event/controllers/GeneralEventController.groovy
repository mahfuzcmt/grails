package com.webcommander.plugin.general_event.controllers

import com.webcommander.authentication.annotations.AutoGeneratedPage
import com.webcommander.constants.DomainConstants
import com.webcommander.manager.CartManager
import com.webcommander.manager.HookManager
import com.webcommander.plugin.general_event.GeneralEvent
import com.webcommander.plugin.general_event.GeneralEventService
import com.webcommander.plugin.general_event.RecurringEvents
import com.webcommander.plugin.general_event.VenueLocationSection
import com.webcommander.plugin.general_event.VenueLocation
import grails.converters.JSON

class GeneralEventController {

    GeneralEventService generalEventService

    @AutoGeneratedPage("general.event")
    def getEventDetails() {
        Long id = params.id.toLong(0)
        GeneralEvent parentEvent
        RecurringEvents childEvent
        if(params.isRecurring.toBoolean()) {
            childEvent = RecurringEvents.findById(id)
            parentEvent = childEvent.parentEvent
        } else {
            parentEvent = GeneralEvent.findById(id)
        }
        if(!parentEvent) {
            response.setStatus(404)
            forward(controller: 'exception', action: 'handle404')
            return
        }
        String view = "/site/siteAutoPage";
        Map model = [name: DomainConstants.AUTO_GENERATED_PAGES.GENERAL_EVENT_DETAILS, view: "/plugins/general_event/site/eventDetails.gsp", parentEvent: parentEvent, childEvent: childEvent, metaTags: parentEvent.metaTags, title: parentEvent.title, macros: [GENERAL_EVENT_NAME: parentEvent.name]];
        view = HookManager.hook("auto-page-view-model", view, model);
        render (view: view, model: model)
    }

    @AutoGeneratedPage("venue")
    def venueLocation() {
        VenueLocation location = VenueLocation.findByUrl(params.url)
        if(!location) {
            response.setStatus(404)
            forward(controller: "exception", action: "handle404")
            return
        }
        String view = "/site/siteAutoPage";
        Map model = [name : DomainConstants.AUTO_GENERATED_PAGES.VENUE_LOCATION_DETAILS_PAGE, location: location, macros: [LOCATION: location.name],
                     view: "/plugins/general_event/site/venueLocationDetails.gsp"];
        view = HookManager.hook("auto-page-view-model", view, model);
        render (view: view, model: model)
    }

    def sectionInfo() {
        VenueLocationSection section = VenueLocationSection.get(params.section.toLong())
        def ticketPurchased = generalEventService.getNumberOfTicketPurchased(section)

        render(view: "/plugins/general_event/site/sectionInfo", model: [
                event: params.event.toLong(), section: section, showCart: params.showCart ?: false, spinMax: (section.rowCount * section.columnCount - ticketPurchased)
        ])
    }

    def seatMap() {
        VenueLocationSection section = params.section instanceof VenueLocationSection ? params.section : VenueLocationSection.get(params.section)
        Integer rowNumber = generalEventService.getStartRowNumber(section)
        Integer columnNumber = generalEventService.getStartColumnNumber(section)
        render view: "/plugins/general_event/site/seatView", model: [section: section, rowNumber: rowNumber, columnNumber: columnNumber]
    }

    def checkIfSeatIsAvailable() {
        def event = params.isRecurring.toBoolean() ? RecurringEvents.get(params.long("eventId")) : GeneralEvent.get(params.long("eventId"))
        Boolean result = generalEventService.isTicketAvailable(params.int("seat"), event, VenueLocationSection.get(params.long("sectionId")))
        if(result) {
            render([status: "success"] as JSON)
        } else {
            render([status: "error", message: g.message(code: "selected.seat.is.not.available")] as JSON)
        }
    }

    def loadCustomFieldsStep() {
        Map model = generalEventService.getFieldsOrTitle(params.eventId.toLong());
        render(view: "/plugins/general_event/site/customFieldBlock.gsp", model: [fields: model.fields, eventId: params.eventId, quantity: params.quantity.toInteger()]);
    }

    def holdFields() {
        if(!CartManager.hasCart(session.id)) {
            render(text: g.message(code: "cart.not.available"), status: 412)
            return;
        }
        session[params.eventId] = params.custom;
        render([status: "success"] as JSON);
    }
}
